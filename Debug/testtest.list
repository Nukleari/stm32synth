
testtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005680  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08005830  08005830  00015830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c30  08005c30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c38  08005c38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c3c  08005c3c  00015c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08005c4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08005c4c  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001114e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e7  00000000  00000000  0003118a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00033878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  000346c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002704e  00000000  00000000  00035420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fef4  00000000  00000000  0005c46e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e022f  00000000  00000000  0006c362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c591  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc0  00000000  00000000  0014c5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005818 	.word	0x08005818

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08005818 	.word	0x08005818

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b96e 	b.w	8000e20 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	468c      	mov	ip, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8083 	bne.w	8000c72 <__udivmoddi4+0x116>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4617      	mov	r7, r2
 8000b70:	d947      	bls.n	8000c02 <__udivmoddi4+0xa6>
 8000b72:	fab2 f282 	clz	r2, r2
 8000b76:	b142      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b78:	f1c2 0020 	rsb	r0, r2, #32
 8000b7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b80:	4091      	lsls	r1, r2
 8000b82:	4097      	lsls	r7, r2
 8000b84:	ea40 0c01 	orr.w	ip, r0, r1
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbbc f6f8 	udiv	r6, ip, r8
 8000b94:	fa1f fe87 	uxth.w	lr, r7
 8000b98:	fb08 c116 	mls	r1, r8, r6, ip
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bae:	f080 8119 	bcs.w	8000de4 <__udivmoddi4+0x288>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8116 	bls.w	8000de4 <__udivmoddi4+0x288>
 8000bb8:	3e02      	subs	r6, #2
 8000bba:	443b      	add	r3, r7
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd0:	45a6      	cmp	lr, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8105 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bde:	45a6      	cmp	lr, r4
 8000be0:	f240 8102 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000be4:	3802      	subs	r0, #2
 8000be6:	443c      	add	r4, r7
 8000be8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bec:	eba4 040e 	sub.w	r4, r4, lr
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	b11d      	cbz	r5, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bfc:	4631      	mov	r1, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xaa>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d150      	bne.n	8000cb0 <__udivmoddi4+0x154>
 8000c0e:	1bcb      	subs	r3, r1, r7
 8000c10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c14:	fa1f f887 	uxth.w	r8, r7
 8000c18:	2601      	movs	r6, #1
 8000c1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c1e:	0c21      	lsrs	r1, r4, #16
 8000c20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c28:	fb08 f30c 	mul.w	r3, r8, ip
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000c30:	1879      	adds	r1, r7, r1
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0xe2>
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	f200 80e9 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1ac9      	subs	r1, r1, r3
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x10c>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x10a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80d9 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e7bf      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x12e>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80b1 	beq.w	8000dde <__udivmoddi4+0x282>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x1cc>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0x140>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80b8 	bhi.w	8000e0c <__udivmoddi4+0x2b0>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0a8      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000caa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cae:	e7a5      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cb8:	4097      	lsls	r7, r2
 8000cba:	fa01 f002 	lsl.w	r0, r1, r2
 8000cbe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc2:	40d9      	lsrs	r1, r3
 8000cc4:	4330      	orrs	r0, r6
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ccc:	fa1f f887 	uxth.w	r8, r7
 8000cd0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd8:	fb06 f108 	mul.w	r1, r6, r8
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x19c>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cea:	f080 808d 	bcs.w	8000e08 <__udivmoddi4+0x2ac>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 808a 	bls.w	8000e08 <__udivmoddi4+0x2ac>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b281      	uxth	r1, r0
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d08:	fb00 f308 	mul.w	r3, r0, r8
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x1c4>
 8000d10:	1879      	adds	r1, r7, r1
 8000d12:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d16:	d273      	bcs.n	8000e00 <__udivmoddi4+0x2a4>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d971      	bls.n	8000e00 <__udivmoddi4+0x2a4>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4439      	add	r1, r7
 8000d20:	1acb      	subs	r3, r1, r3
 8000d22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d26:	e778      	b.n	8000c1a <__udivmoddi4+0xbe>
 8000d28:	f1c6 0c20 	rsb	ip, r6, #32
 8000d2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d34:	431c      	orrs	r4, r3
 8000d36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d46:	431f      	orrs	r7, r3
 8000d48:	0c3b      	lsrs	r3, r7, #16
 8000d4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d4e:	fa1f f884 	uxth.w	r8, r4
 8000d52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d5e:	458a      	cmp	sl, r1
 8000d60:	fa02 f206 	lsl.w	r2, r2, r6
 8000d64:	fa00 f306 	lsl.w	r3, r0, r6
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x220>
 8000d6a:	1861      	adds	r1, r4, r1
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d70:	d248      	bcs.n	8000e04 <__udivmoddi4+0x2a8>
 8000d72:	458a      	cmp	sl, r1
 8000d74:	d946      	bls.n	8000e04 <__udivmoddi4+0x2a8>
 8000d76:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7a:	4421      	add	r1, r4
 8000d7c:	eba1 010a 	sub.w	r1, r1, sl
 8000d80:	b2bf      	uxth	r7, r7
 8000d82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d8e:	fb00 f808 	mul.w	r8, r0, r8
 8000d92:	45b8      	cmp	r8, r7
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x24a>
 8000d96:	19e7      	adds	r7, r4, r7
 8000d98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9c:	d22e      	bcs.n	8000dfc <__udivmoddi4+0x2a0>
 8000d9e:	45b8      	cmp	r8, r7
 8000da0:	d92c      	bls.n	8000dfc <__udivmoddi4+0x2a0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	4427      	add	r7, r4
 8000da6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000daa:	eba7 0708 	sub.w	r7, r7, r8
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	454f      	cmp	r7, r9
 8000db4:	46c6      	mov	lr, r8
 8000db6:	4649      	mov	r1, r9
 8000db8:	d31a      	bcc.n	8000df0 <__udivmoddi4+0x294>
 8000dba:	d017      	beq.n	8000dec <__udivmoddi4+0x290>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x27a>
 8000dbe:	ebb3 020e 	subs.w	r2, r3, lr
 8000dc2:	eb67 0701 	sbc.w	r7, r7, r1
 8000dc6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dca:	40f2      	lsrs	r2, r6
 8000dcc:	ea4c 0202 	orr.w	r2, ip, r2
 8000dd0:	40f7      	lsrs	r7, r6
 8000dd2:	e9c5 2700 	strd	r2, r7, [r5]
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	462e      	mov	r6, r5
 8000de0:	4628      	mov	r0, r5
 8000de2:	e70b      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de4:	4606      	mov	r6, r0
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0x60>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6fd      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000dec:	4543      	cmp	r3, r8
 8000dee:	d2e5      	bcs.n	8000dbc <__udivmoddi4+0x260>
 8000df0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000df4:	eb69 0104 	sbc.w	r1, r9, r4
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e7df      	b.n	8000dbc <__udivmoddi4+0x260>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e7d2      	b.n	8000da6 <__udivmoddi4+0x24a>
 8000e00:	4660      	mov	r0, ip
 8000e02:	e78d      	b.n	8000d20 <__udivmoddi4+0x1c4>
 8000e04:	4681      	mov	r9, r0
 8000e06:	e7b9      	b.n	8000d7c <__udivmoddi4+0x220>
 8000e08:	4666      	mov	r6, ip
 8000e0a:	e775      	b.n	8000cf8 <__udivmoddi4+0x19c>
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e74a      	b.n	8000ca6 <__udivmoddi4+0x14a>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	4439      	add	r1, r7
 8000e16:	e713      	b.n	8000c40 <__udivmoddi4+0xe4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	443c      	add	r4, r7
 8000e1c:	e724      	b.n	8000c68 <__udivmoddi4+0x10c>
 8000e1e:	bf00      	nop

08000e20 <__aeabi_idiv0>:
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <_ZN6KeypadC1Ev>:
#include "main.h"
#include "keypad.hpp"

Keypad::Keypad(){
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	705a      	strb	r2, [r3, #1]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	709a      	strb	r2, [r3, #2]
}
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_ZN6Keypad6updateEv>:
bool Keypad::update(){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
note = 0;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e60:	48b2      	ldr	r0, [pc, #712]	; (800112c <_ZN6Keypad6updateEv+0x2e0>)
 8000e62:	f002 fa27 	bl	80032b4 <HAL_GPIO_WritePin>
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10)) note = 52;
 8000e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6a:	48b1      	ldr	r0, [pc, #708]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 8000e6c:	f002 fa0a 	bl	8003284 <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	bf14      	ite	ne
 8000e76:	2301      	movne	r3, #1
 8000e78:	2300      	moveq	r3, #0
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <_ZN6Keypad6updateEv+0x3a>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2234      	movs	r2, #52	; 0x34
 8000e84:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)) note = 53;
 8000e86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e8a:	48a9      	ldr	r0, [pc, #676]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 8000e8c:	f002 f9fa 	bl	8003284 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bf14      	ite	ne
 8000e96:	2301      	movne	r3, #1
 8000e98:	2300      	moveq	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <_ZN6Keypad6updateEv+0x5a>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2235      	movs	r2, #53	; 0x35
 8000ea4:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14)) note = 54;
 8000ea6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eaa:	48a1      	ldr	r0, [pc, #644]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 8000eac:	f002 f9ea 	bl	8003284 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	bf14      	ite	ne
 8000eb6:	2301      	movne	r3, #1
 8000eb8:	2300      	moveq	r3, #0
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d002      	beq.n	8000ec6 <_ZN6Keypad6updateEv+0x7a>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2236      	movs	r2, #54	; 0x36
 8000ec4:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)) note = 55;
 8000ec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eca:	4899      	ldr	r0, [pc, #612]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 8000ecc:	f002 f9da 	bl	8003284 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	bf14      	ite	ne
 8000ed6:	2301      	movne	r3, #1
 8000ed8:	2300      	moveq	r3, #0
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <_ZN6Keypad6updateEv+0x9a>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2237      	movs	r2, #55	; 0x37
 8000ee4:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)) note = 56;
 8000ee6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eea:	4892      	ldr	r0, [pc, #584]	; (8001134 <_ZN6Keypad6updateEv+0x2e8>)
 8000eec:	f002 f9ca 	bl	8003284 <HAL_GPIO_ReadPin>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bf14      	ite	ne
 8000ef6:	2301      	movne	r3, #1
 8000ef8:	2300      	moveq	r3, #0
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <_ZN6Keypad6updateEv+0xba>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2238      	movs	r2, #56	; 0x38
 8000f04:	701a      	strb	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0c:	4887      	ldr	r0, [pc, #540]	; (800112c <_ZN6Keypad6updateEv+0x2e0>)
 8000f0e:	f002 f9d1 	bl	80032b4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f18:	4884      	ldr	r0, [pc, #528]	; (800112c <_ZN6Keypad6updateEv+0x2e0>)
 8000f1a:	f002 f9cb 	bl	80032b4 <HAL_GPIO_WritePin>
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10)) note = 57;
 8000f1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f22:	4883      	ldr	r0, [pc, #524]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 8000f24:	f002 f9ae 	bl	8003284 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	bf14      	ite	ne
 8000f2e:	2301      	movne	r3, #1
 8000f30:	2300      	moveq	r3, #0
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d002      	beq.n	8000f3e <_ZN6Keypad6updateEv+0xf2>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2239      	movs	r2, #57	; 0x39
 8000f3c:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)) note = 58;
 8000f3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f42:	487b      	ldr	r0, [pc, #492]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 8000f44:	f002 f99e 	bl	8003284 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bf14      	ite	ne
 8000f4e:	2301      	movne	r3, #1
 8000f50:	2300      	moveq	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <_ZN6Keypad6updateEv+0x112>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	223a      	movs	r2, #58	; 0x3a
 8000f5c:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14)) note = 59;
 8000f5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f62:	4873      	ldr	r0, [pc, #460]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 8000f64:	f002 f98e 	bl	8003284 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf14      	ite	ne
 8000f6e:	2301      	movne	r3, #1
 8000f70:	2300      	moveq	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <_ZN6Keypad6updateEv+0x132>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	223b      	movs	r2, #59	; 0x3b
 8000f7c:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)) note = 60;
 8000f7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f82:	486b      	ldr	r0, [pc, #428]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 8000f84:	f002 f97e 	bl	8003284 <HAL_GPIO_ReadPin>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	bf14      	ite	ne
 8000f8e:	2301      	movne	r3, #1
 8000f90:	2300      	moveq	r3, #0
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <_ZN6Keypad6updateEv+0x152>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	223c      	movs	r2, #60	; 0x3c
 8000f9c:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)) note = 61;
 8000f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa2:	4864      	ldr	r0, [pc, #400]	; (8001134 <_ZN6Keypad6updateEv+0x2e8>)
 8000fa4:	f002 f96e 	bl	8003284 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	bf14      	ite	ne
 8000fae:	2301      	movne	r3, #1
 8000fb0:	2300      	moveq	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <_ZN6Keypad6updateEv+0x172>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	223d      	movs	r2, #61	; 0x3d
 8000fbc:	701a      	strb	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc4:	4859      	ldr	r0, [pc, #356]	; (800112c <_ZN6Keypad6updateEv+0x2e0>)
 8000fc6:	f002 f975 	bl	80032b4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4858      	ldr	r0, [pc, #352]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 8000fd0:	f002 f970 	bl	80032b4 <HAL_GPIO_WritePin>
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10)) note = 62;
 8000fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd8:	4855      	ldr	r0, [pc, #340]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 8000fda:	f002 f953 	bl	8003284 <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	bf14      	ite	ne
 8000fe4:	2301      	movne	r3, #1
 8000fe6:	2300      	moveq	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <_ZN6Keypad6updateEv+0x1a8>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	223e      	movs	r2, #62	; 0x3e
 8000ff2:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)) note = 63;
 8000ff4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff8:	484d      	ldr	r0, [pc, #308]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 8000ffa:	f002 f943 	bl	8003284 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	bf14      	ite	ne
 8001004:	2301      	movne	r3, #1
 8001006:	2300      	moveq	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <_ZN6Keypad6updateEv+0x1c8>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	223f      	movs	r2, #63	; 0x3f
 8001012:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14)) note = 64;
 8001014:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001018:	4845      	ldr	r0, [pc, #276]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 800101a:	f002 f933 	bl	8003284 <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	bf14      	ite	ne
 8001024:	2301      	movne	r3, #1
 8001026:	2300      	moveq	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <_ZN6Keypad6updateEv+0x1e8>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2240      	movs	r2, #64	; 0x40
 8001032:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)) note = 65;
 8001034:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001038:	483d      	ldr	r0, [pc, #244]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 800103a:	f002 f923 	bl	8003284 <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <_ZN6Keypad6updateEv+0x208>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2241      	movs	r2, #65	; 0x41
 8001052:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)) note = 66;
 8001054:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001058:	4836      	ldr	r0, [pc, #216]	; (8001134 <_ZN6Keypad6updateEv+0x2e8>)
 800105a:	f002 f913 	bl	8003284 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf14      	ite	ne
 8001064:	2301      	movne	r3, #1
 8001066:	2300      	moveq	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <_ZN6Keypad6updateEv+0x228>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2242      	movs	r2, #66	; 0x42
 8001072:	701a      	strb	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2104      	movs	r1, #4
 8001078:	482d      	ldr	r0, [pc, #180]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 800107a:	f002 f91b 	bl	80032b4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 800107e:	2201      	movs	r2, #1
 8001080:	2101      	movs	r1, #1
 8001082:	482b      	ldr	r0, [pc, #172]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 8001084:	f002 f916 	bl	80032b4 <HAL_GPIO_WritePin>
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10)) note = 67;
 8001088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108c:	4828      	ldr	r0, [pc, #160]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 800108e:	f002 f8f9 	bl	8003284 <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2301      	movne	r3, #1
 800109a:	2300      	moveq	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <_ZN6Keypad6updateEv+0x25c>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2243      	movs	r2, #67	; 0x43
 80010a6:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)) note = 68;
 80010a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ac:	4820      	ldr	r0, [pc, #128]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 80010ae:	f002 f8e9 	bl	8003284 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bf14      	ite	ne
 80010b8:	2301      	movne	r3, #1
 80010ba:	2300      	moveq	r3, #0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d002      	beq.n	80010c8 <_ZN6Keypad6updateEv+0x27c>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2244      	movs	r2, #68	; 0x44
 80010c6:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14)) note = 69;
 80010c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010cc:	4818      	ldr	r0, [pc, #96]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 80010ce:	f002 f8d9 	bl	8003284 <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf14      	ite	ne
 80010d8:	2301      	movne	r3, #1
 80010da:	2300      	moveq	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <_ZN6Keypad6updateEv+0x29c>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2245      	movs	r2, #69	; 0x45
 80010e6:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)) note = 70;
 80010e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ec:	4810      	ldr	r0, [pc, #64]	; (8001130 <_ZN6Keypad6updateEv+0x2e4>)
 80010ee:	f002 f8c9 	bl	8003284 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bf14      	ite	ne
 80010f8:	2301      	movne	r3, #1
 80010fa:	2300      	moveq	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <_ZN6Keypad6updateEv+0x2bc>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2246      	movs	r2, #70	; 0x46
 8001106:	701a      	strb	r2, [r3, #0]
if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)) note = 71;
 8001108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110c:	4809      	ldr	r0, [pc, #36]	; (8001134 <_ZN6Keypad6updateEv+0x2e8>)
 800110e:	f002 f8b9 	bl	8003284 <HAL_GPIO_ReadPin>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	bf14      	ite	ne
 8001118:	2301      	movne	r3, #1
 800111a:	2300      	moveq	r3, #0
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00a      	beq.n	8001138 <_ZN6Keypad6updateEv+0x2ec>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2247      	movs	r2, #71	; 0x47
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e006      	b.n	8001138 <_ZN6Keypad6updateEv+0x2ec>
 800112a:	bf00      	nop
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40021000 	.word	0x40021000
 8001134:	40020400 	.word	0x40020400
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2101      	movs	r1, #1
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <_ZN6Keypad6updateEv+0x320>)
 800113e:	f002 f8b9 	bl	80032b4 <HAL_GPIO_WritePin>

note_changed = (note != prev_note);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	781a      	ldrb	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	785b      	ldrb	r3, [r3, #1]
 800114a:	429a      	cmp	r2, r3
 800114c:	bf14      	ite	ne
 800114e:	2301      	movne	r3, #1
 8001150:	2300      	moveq	r3, #0
 8001152:	b2da      	uxtb	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	709a      	strb	r2, [r3, #2]

prev_note = note;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	781a      	ldrb	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	705a      	strb	r2, [r3, #1]
return note_changed;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	789b      	ldrb	r3, [r3, #2]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000

08001170 <_ZN6Keypad8get_noteEv>:
bool Keypad::NoteChanged(){
return note_changed;
}
uint8_t Keypad::get_note(){
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
return note;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	f5ad 4d1e 	sub.w	sp, sp, #40448	; 0x9e00
 800118e:	b09c      	sub	sp, #112	; 0x70
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001192:	f000 ff13 	bl	8001fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001196:	f000 f861 	bl	800125c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119a:	f000 f9bb 	bl	8001514 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800119e:	f000 f999 	bl	80014d4 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 80011a2:	f000 f969 	bl	8001478 <_ZL19MX_USART3_UART_Initv>
  MX_DAC_Init();
 80011a6:	f000 f8d9 	bl	800135c <_ZL11MX_DAC_Initv>
  MX_TIM2_Init();
 80011aa:	f000 f90b 	bl	80013c4 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  Keypad keypad = Keypad();
 80011ae:	f507 431e 	add.w	r3, r7, #40448	; 0x9e00
 80011b2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fe34 	bl	8000e24 <_ZN6KeypadC1Ev>
  Synth synth = Synth(&hdac, DAC_CHANNEL_2, &htim2);
 80011bc:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80011c0:	3870      	subs	r0, #112	; 0x70
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <main+0xc4>)
 80011c4:	2210      	movs	r2, #16
 80011c6:	4922      	ldr	r1, [pc, #136]	; (8001250 <main+0xc8>)
 80011c8:	f000 fc4a 	bl	8001a60 <_ZN5SynthC1EP17DAC_HandleTypeDefmP17TIM_HandleTypeDef>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80011cc:	2101      	movs	r1, #1
 80011ce:	4821      	ldr	r0, [pc, #132]	; (8001254 <main+0xcc>)
 80011d0:	f002 f889 	bl	80032e6 <HAL_GPIO_TogglePin>

	  if(keypad.update()){
 80011d4:	f507 431e 	add.w	r3, r7, #40448	; 0x9e00
 80011d8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fe35 	bl	8000e4c <_ZN6Keypad6updateEv>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d02d      	beq.n	8001244 <main+0xbc>
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80011e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ec:	481a      	ldr	r0, [pc, #104]	; (8001258 <main+0xd0>)
 80011ee:	f002 f849 	bl	8003284 <HAL_GPIO_ReadPin>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bf14      	ite	ne
 80011f8:	2301      	movne	r3, #1
 80011fa:	2300      	moveq	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d010      	beq.n	8001224 <main+0x9c>
			  synth.config(keypad.get_note());
 8001202:	f507 431e 	add.w	r3, r7, #40448	; 0x9e00
 8001206:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ffb0 	bl	8001170 <_ZN6Keypad8get_noteEv>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001218:	3b70      	subs	r3, #112	; 0x70
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f000 fd1b 	bl	8001c58 <_ZN5Synth6configEh>
 8001222:	e00f      	b.n	8001244 <main+0xbc>
		  }else{
			  synth.update(keypad.get_note());
 8001224:	f507 431e 	add.w	r3, r7, #40448	; 0x9e00
 8001228:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff9f 	bl	8001170 <_ZN6Keypad8get_noteEv>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800123a:	3b70      	subs	r3, #112	; 0x70
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fc5c 	bl	8001afc <_ZN5Synth6updateEh>
		  }
	  }
	  HAL_Delay(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f000 ff2b 	bl	80020a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800124a:	e7bf      	b.n	80011cc <main+0x44>
 800124c:	2000009c 	.word	0x2000009c
 8001250:	20000028 	.word	0x20000028
 8001254:	40020400 	.word	0x40020400
 8001258:	40020800 	.word	0x40020800

0800125c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	; 0x50
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	2230      	movs	r2, #48	; 0x30
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f004 facc 	bl	8005808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	4b33      	ldr	r3, [pc, #204]	; (8001354 <_Z18SystemClock_Configv+0xf8>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	4a32      	ldr	r2, [pc, #200]	; (8001354 <_Z18SystemClock_Configv+0xf8>)
 800128a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128e:	6413      	str	r3, [r2, #64]	; 0x40
 8001290:	4b30      	ldr	r3, [pc, #192]	; (8001354 <_Z18SystemClock_Configv+0xf8>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <_Z18SystemClock_Configv+0xfc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a2c      	ldr	r2, [pc, #176]	; (8001358 <_Z18SystemClock_Configv+0xfc>)
 80012a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <_Z18SystemClock_Configv+0xfc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b8:	2301      	movs	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c2:	2302      	movs	r3, #2
 80012c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012cc:	2304      	movs	r3, #4
 80012ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012d0:	23b4      	movs	r3, #180	; 0xb4
 80012d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012d8:	2307      	movs	r3, #7
 80012da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 f86b 	bl	80033bc <HAL_RCC_OscConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf14      	ite	ne
 80012ec:	2301      	movne	r3, #1
 80012ee:	2300      	moveq	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80012f6:	f000 fa71 	bl	80017dc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012fa:	f002 f80f 	bl	800331c <HAL_PWREx_EnableOverDrive>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	bf14      	ite	ne
 8001304:	2301      	movne	r3, #1
 8001306:	2300      	moveq	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800130e:	f000 fa65 	bl	80017dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001312:	230f      	movs	r3, #15
 8001314:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001316:	2302      	movs	r3, #2
 8001318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800131e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001322:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001328:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	2105      	movs	r1, #5
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fabb 	bl	80038ac <HAL_RCC_ClockConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	bf14      	ite	ne
 800133c:	2301      	movne	r3, #1
 800133e:	2300      	moveq	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 8001346:	f000 fa49 	bl	80017dc <Error_Handler>
  }
}
 800134a:	bf00      	nop
 800134c:	3750      	adds	r7, #80	; 0x50
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000

0800135c <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001362:	463b      	mov	r3, r7
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <_ZL11MX_DAC_Initv+0x60>)
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <_ZL11MX_DAC_Initv+0x64>)
 800136e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001370:	4812      	ldr	r0, [pc, #72]	; (80013bc <_ZL11MX_DAC_Initv+0x60>)
 8001372:	f000 ffca 	bl	800230a <HAL_DAC_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	bf14      	ite	ne
 800137c:	2301      	movne	r3, #1
 800137e:	2300      	moveq	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 8001386:	f000 fa29 	bl	80017dc <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800138a:	2324      	movs	r3, #36	; 0x24
 800138c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	2210      	movs	r2, #16
 8001396:	4619      	mov	r1, r3
 8001398:	4808      	ldr	r0, [pc, #32]	; (80013bc <_ZL11MX_DAC_Initv+0x60>)
 800139a:	f001 f90d 	bl	80025b8 <HAL_DAC_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf14      	ite	ne
 80013a4:	2301      	movne	r3, #1
 80013a6:	2300      	moveq	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 80013ae:	f000 fa15 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000028 	.word	0x20000028
 80013c0:	40007400 	.word	0x40007400

080013c4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d8:	463b      	mov	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <_ZL12MX_TIM2_Initv+0xb0>)
 80013e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <_ZL12MX_TIM2_Initv+0xb0>)
 80013ea:	2259      	movs	r2, #89	; 0x59
 80013ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <_ZL12MX_TIM2_Initv+0xb0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <_ZL12MX_TIM2_Initv+0xb0>)
 80013f6:	2209      	movs	r2, #9
 80013f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <_ZL12MX_TIM2_Initv+0xb0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001400:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <_ZL12MX_TIM2_Initv+0xb0>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001406:	481b      	ldr	r0, [pc, #108]	; (8001474 <_ZL12MX_TIM2_Initv+0xb0>)
 8001408:	f002 fc4c 	bl	8003ca4 <HAL_TIM_Base_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	bf14      	ite	ne
 8001412:	2301      	movne	r3, #1
 8001414:	2300      	moveq	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <_ZL12MX_TIM2_Initv+0x5c>
  {
    Error_Handler();
 800141c:	f000 f9de 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001424:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	4619      	mov	r1, r3
 800142c:	4811      	ldr	r0, [pc, #68]	; (8001474 <_ZL12MX_TIM2_Initv+0xb0>)
 800142e:	f002 fcf1 	bl	8003e14 <HAL_TIM_ConfigClockSource>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf14      	ite	ne
 8001438:	2301      	movne	r3, #1
 800143a:	2300      	moveq	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <_ZL12MX_TIM2_Initv+0x82>
  {
    Error_Handler();
 8001442:	f000 f9cb 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001446:	2320      	movs	r3, #32
 8001448:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	4619      	mov	r1, r3
 8001452:	4808      	ldr	r0, [pc, #32]	; (8001474 <_ZL12MX_TIM2_Initv+0xb0>)
 8001454:	f002 fedc 	bl	8004210 <HAL_TIMEx_MasterConfigSynchronization>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	bf14      	ite	ne
 800145e:	2301      	movne	r3, #1
 8001460:	2300      	moveq	r3, #0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <_ZL12MX_TIM2_Initv+0xa8>
  {
    Error_Handler();
 8001468:	f000 f9b8 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000009c 	.word	0x2000009c

08001478 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <_ZL19MX_USART3_UART_Initv+0x54>)
 800147e:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001480:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <_ZL19MX_USART3_UART_Initv+0x54>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <_ZL19MX_USART3_UART_Initv+0x54>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <_ZL19MX_USART3_UART_Initv+0x54>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <_ZL19MX_USART3_UART_Initv+0x54>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ae:	4807      	ldr	r0, [pc, #28]	; (80014cc <_ZL19MX_USART3_UART_Initv+0x54>)
 80014b0:	f002 ff2a 	bl	8004308 <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	bf14      	ite	ne
 80014ba:	2301      	movne	r3, #1
 80014bc:	2300      	moveq	r3, #0
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80014c4:	f000 f98a 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000e4 	.word	0x200000e4
 80014d0:	40004800 	.word	0x40004800

080014d4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <_ZL11MX_DMA_Initv+0x3c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <_ZL11MX_DMA_Initv+0x3c>)
 80014e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <_ZL11MX_DMA_Initv+0x3c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	2011      	movs	r0, #17
 80014fc:	f000 fecf 	bl	800229e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001500:	2011      	movs	r0, #17
 8001502:	f000 fee8 	bl	80022d6 <HAL_NVIC_EnableIRQ>

}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800

08001514 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	; 0x30
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
 800152e:	4ba3      	ldr	r3, [pc, #652]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4aa2      	ldr	r2, [pc, #648]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 8001534:	f043 0310 	orr.w	r3, r3, #16
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4ba0      	ldr	r3, [pc, #640]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	4b9c      	ldr	r3, [pc, #624]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a9b      	ldr	r2, [pc, #620]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b99      	ldr	r3, [pc, #612]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b95      	ldr	r3, [pc, #596]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a94      	ldr	r2, [pc, #592]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 800156c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b92      	ldr	r3, [pc, #584]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b8e      	ldr	r3, [pc, #568]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a8d      	ldr	r2, [pc, #564]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b8b      	ldr	r3, [pc, #556]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b87      	ldr	r3, [pc, #540]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a86      	ldr	r2, [pc, #536]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b84      	ldr	r3, [pc, #528]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b80      	ldr	r3, [pc, #512]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a7f      	ldr	r2, [pc, #508]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b7d      	ldr	r3, [pc, #500]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4b79      	ldr	r3, [pc, #484]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a78      	ldr	r2, [pc, #480]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 80015dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b76      	ldr	r3, [pc, #472]	; (80017bc <_ZL12MX_GPIO_Initv+0x2a8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2105      	movs	r1, #5
 80015f2:	4873      	ldr	r0, [pc, #460]	; (80017c0 <_ZL12MX_GPIO_Initv+0x2ac>)
 80015f4:	f001 fe5e 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f244 0181 	movw	r1, #16513	; 0x4081
 80015fe:	4871      	ldr	r0, [pc, #452]	; (80017c4 <_ZL12MX_GPIO_Initv+0x2b0>)
 8001600:	f001 fe58 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROW1_Pin|ROW0_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800160a:	486f      	ldr	r0, [pc, #444]	; (80017c8 <_ZL12MX_GPIO_Initv+0x2b4>)
 800160c:	f001 fe52 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	2140      	movs	r1, #64	; 0x40
 8001614:	486d      	ldr	r0, [pc, #436]	; (80017cc <_ZL12MX_GPIO_Initv+0x2b8>)
 8001616:	f001 fe4d 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW2_Pin|ROW3_Pin;
 800161a:	2305      	movs	r3, #5
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001626:	2302      	movs	r3, #2
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	4863      	ldr	r0, [pc, #396]	; (80017c0 <_ZL12MX_GPIO_Initv+0x2ac>)
 8001632:	f001 fc7b 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800163c:	4b64      	ldr	r3, [pc, #400]	; (80017d0 <_ZL12MX_GPIO_Initv+0x2bc>)
 800163e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4862      	ldr	r0, [pc, #392]	; (80017d4 <_ZL12MX_GPIO_Initv+0x2c0>)
 800164c:	f001 fc6e 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001650:	2332      	movs	r3, #50	; 0x32
 8001652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001660:	230b      	movs	r3, #11
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	485a      	ldr	r0, [pc, #360]	; (80017d4 <_ZL12MX_GPIO_Initv+0x2c0>)
 800166c:	f001 fc5e 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001670:	2386      	movs	r3, #134	; 0x86
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001680:	230b      	movs	r3, #11
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4853      	ldr	r0, [pc, #332]	; (80017d8 <_ZL12MX_GPIO_Initv+0x2c4>)
 800168c:	f001 fc4e 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001690:	f244 0381 	movw	r3, #16513	; 0x4081
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	4619      	mov	r1, r3
 80016a8:	4846      	ldr	r0, [pc, #280]	; (80017c4 <_ZL12MX_GPIO_Initv+0x2b0>)
 80016aa:	f001 fc3f 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin;
 80016ae:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016b8:	2302      	movs	r3, #2
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	483f      	ldr	r0, [pc, #252]	; (80017c0 <_ZL12MX_GPIO_Initv+0x2ac>)
 80016c4:	f001 fc32 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : COL4_Pin */
  GPIO_InitStruct.Pin = COL4_Pin;
 80016c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016d2:	2302      	movs	r3, #2
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COL4_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4839      	ldr	r0, [pc, #228]	; (80017c4 <_ZL12MX_GPIO_Initv+0x2b0>)
 80016de:	f001 fc25 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80016e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016f4:	230b      	movs	r3, #11
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	4831      	ldr	r0, [pc, #196]	; (80017c4 <_ZL12MX_GPIO_Initv+0x2b0>)
 8001700:	f001 fc14 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW1_Pin ROW0_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW0_Pin;
 8001704:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001712:	2302      	movs	r3, #2
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	4619      	mov	r1, r3
 800171c:	482a      	ldr	r0, [pc, #168]	; (80017c8 <_ZL12MX_GPIO_Initv+0x2b4>)
 800171e:	f001 fc05 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001722:	2340      	movs	r3, #64	; 0x40
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	4824      	ldr	r0, [pc, #144]	; (80017cc <_ZL12MX_GPIO_Initv+0x2b8>)
 800173a:	f001 fbf7 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 031c 	add.w	r3, r7, #28
 800174e:	4619      	mov	r1, r3
 8001750:	481e      	ldr	r0, [pc, #120]	; (80017cc <_ZL12MX_GPIO_Initv+0x2b8>)
 8001752:	f001 fbeb 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001756:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800175a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001768:	230a      	movs	r3, #10
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4819      	ldr	r0, [pc, #100]	; (80017d8 <_ZL12MX_GPIO_Initv+0x2c4>)
 8001774:	f001 fbda 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4619      	mov	r1, r3
 800178c:	4812      	ldr	r0, [pc, #72]	; (80017d8 <_ZL12MX_GPIO_Initv+0x2c4>)
 800178e:	f001 fbcd 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001792:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017a4:	230b      	movs	r3, #11
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4807      	ldr	r0, [pc, #28]	; (80017cc <_ZL12MX_GPIO_Initv+0x2b8>)
 80017b0:	f001 fbbc 	bl	8002f2c <HAL_GPIO_Init>

}
 80017b4:	bf00      	nop
 80017b6:	3730      	adds	r7, #48	; 0x30
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020c00 	.word	0x40020c00
 80017cc:	40021800 	.word	0x40021800
 80017d0:	10110000 	.word	0x10110000
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020000 	.word	0x40020000

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <Error_Handler+0x8>
	...

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_MspInit+0x4c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a0f      	ldr	r2, [pc, #60]	; (8001834 <HAL_MspInit+0x4c>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <HAL_MspInit+0x4c>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_MspInit+0x4c>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a08      	ldr	r2, [pc, #32]	; (8001834 <HAL_MspInit+0x4c>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_MspInit+0x4c>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a2f      	ldr	r2, [pc, #188]	; (8001914 <HAL_DAC_MspInit+0xdc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d158      	bne.n	800190c <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <HAL_DAC_MspInit+0xe0>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a2d      	ldr	r2, [pc, #180]	; (8001918 <HAL_DAC_MspInit+0xe0>)
 8001864:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_DAC_MspInit+0xe0>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <HAL_DAC_MspInit+0xe0>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a26      	ldr	r2, [pc, #152]	; (8001918 <HAL_DAC_MspInit+0xe0>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b24      	ldr	r3, [pc, #144]	; (8001918 <HAL_DAC_MspInit+0xe0>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001892:	2320      	movs	r3, #32
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001896:	2303      	movs	r3, #3
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	481d      	ldr	r0, [pc, #116]	; (800191c <HAL_DAC_MspInit+0xe4>)
 80018a6:	f001 fb41 	bl	8002f2c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_DAC_MspInit+0xe8>)
 80018ac:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <HAL_DAC_MspInit+0xec>)
 80018ae:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_DAC_MspInit+0xe8>)
 80018b2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80018b6:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_DAC_MspInit+0xe8>)
 80018ba:	2240      	movs	r2, #64	; 0x40
 80018bc:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_DAC_MspInit+0xe8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <HAL_DAC_MspInit+0xe8>)
 80018c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ca:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_DAC_MspInit+0xe8>)
 80018ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018d2:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_DAC_MspInit+0xe8>)
 80018d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018da:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_DAC_MspInit+0xe8>)
 80018de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e2:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_DAC_MspInit+0xe8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_DAC_MspInit+0xe8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80018f0:	480b      	ldr	r0, [pc, #44]	; (8001920 <HAL_DAC_MspInit+0xe8>)
 80018f2:	f000 ff3b 	bl	800276c <HAL_DMA_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80018fc:	f7ff ff6e 	bl	80017dc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a07      	ldr	r2, [pc, #28]	; (8001920 <HAL_DAC_MspInit+0xe8>)
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	4a06      	ldr	r2, [pc, #24]	; (8001920 <HAL_DAC_MspInit+0xe8>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40007400 	.word	0x40007400
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000
 8001920:	2000003c 	.word	0x2000003c
 8001924:	400260a0 	.word	0x400260a0

08001928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001938:	d10d      	bne.n	8001956 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_TIM_Base_MspInit+0x3c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_TIM_Base_MspInit+0x3c>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_TIM_Base_MspInit+0x3c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800

08001968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a19      	ldr	r2, [pc, #100]	; (80019ec <HAL_UART_MspInit+0x84>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d12c      	bne.n	80019e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_UART_MspInit+0x88>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_UART_MspInit+0x88>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_UART_MspInit+0x88>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_UART_MspInit+0x88>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_UART_MspInit+0x88>)
 80019b0:	f043 0308 	orr.w	r3, r3, #8
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_UART_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80019c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019d4:	2307      	movs	r3, #7
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <HAL_UART_MspInit+0x8c>)
 80019e0:	f001 faa4 	bl	8002f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019e4:	bf00      	nop
 80019e6:	3728      	adds	r7, #40	; 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40004800 	.word	0x40004800
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020c00 	.word	0x40020c00

080019f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <NMI_Handler+0x4>

080019fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a44:	f000 fb0c 	bl	8002060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <DMA1_Stream6_IRQHandler+0x10>)
 8001a52:	f001 f801 	bl	8002a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000003c 	.word	0x2000003c

08001a60 <_ZN5SynthC1EP17DAC_HandleTypeDefmP17TIM_HandleTypeDef>:
#include "math.h"
#include "main.h"
#include "synth.hpp"

Synth::Synth(DAC_HandleTypeDef *hdac, uint32_t Channel, TIM_HandleTypeDef *htim){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4a21      	ldr	r2, [pc, #132]	; (8001af8 <_ZN5SynthC1EP17DAC_HandleTypeDefmP17TIM_HandleTypeDef+0x98>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	4611      	mov	r1, r2
 8001a76:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f003 feb6 	bl	80057ec <memcpy>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	22e3      	movs	r2, #227	; 0xe3
 8001a84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001a8e:	3348      	adds	r3, #72	; 0x48
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001a9a:	3349      	adds	r3, #73	; 0x49
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001aa6:	3358      	adds	r3, #88	; 0x58
 8001aa8:	a111      	add	r1, pc, #68	; (adr r1, 8001af0 <_ZN5SynthC1EP17DAC_HandleTypeDefmP17TIM_HandleTypeDef+0x90>)
 8001aaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aae:	e9c3 0100 	strd	r0, r1, [r3]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001ab8:	3360      	adds	r3, #96	; 0x60
 8001aba:	f04f 0000 	mov.w	r0, #0
 8001abe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ac2:	e9c3 0100 	strd	r0, r1, [r3]
	HAL_TIM_Base_Start(htim);
 8001ac6:	6838      	ldr	r0, [r7, #0]
 8001ac8:	f002 f93c 	bl	8003d44 <HAL_TIM_Base_Start>
	this->hdac = hdac;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001ad2:	334c      	adds	r3, #76	; 0x4c
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	601a      	str	r2, [r3, #0]
	this->Channel = Channel;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001ade:	3350      	adds	r3, #80	; 0x50
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	601a      	str	r2, [r3, #0]
}
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	66666666 	.word	0x66666666
 8001af4:	400a6666 	.word	0x400a6666
 8001af8:	08005830 	.word	0x08005830

08001afc <_ZN5Synth6updateEh>:

void Synth::update(uint8_t note){
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
	if(note != 0){
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 8090 	beq.w	8001c30 <_ZN5Synth6updateEh+0x134>
		num_of_samples = (10000000/notes[(note+pitch)]);
 8001b10:	78fa      	ldrb	r2, [r7, #3]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001b18:	3349      	adds	r3, #73	; 0x49
 8001b1a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b1e:	441a      	add	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b26:	4a4b      	ldr	r2, [pc, #300]	; (8001c54 <_ZN5Synth6updateEh+0x158>)
 8001b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

		if(wave_type == 0) generate_sin();
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001b38:	3348      	adds	r3, #72	; 0x48
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <_ZN5Synth6updateEh+0x4a>
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f905 	bl	8001d50 <_ZN5Synth12generate_sinEv>
		if(wave_type == 1) generate_triangle();
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001b4c:	3348      	adds	r3, #72	; 0x48
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d102      	bne.n	8001b5a <_ZN5Synth6updateEh+0x5e>
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f965 	bl	8001e24 <_ZN5Synth17generate_triangleEv>
		if(wave_type == 2) generate_square();
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001b60:	3348      	adds	r3, #72	; 0x48
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d102      	bne.n	8001b6e <_ZN5Synth6updateEh+0x72>
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f99c 	bl	8001ea6 <_ZN5Synth15generate_squareEv>
		if(wave_type == 3) generate_saw();
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001b74:	3348      	adds	r3, #72	; 0x48
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d102      	bne.n	8001b82 <_ZN5Synth6updateEh+0x86>
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f9bd 	bl	8001efc <_ZN5Synth12generate_sawEv>

		for(uint32_t i=0; i<num_of_samples; i++){
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d22b      	bcs.n	8001bea <_ZN5Synth6updateEh+0xee>
			wave_table[i] = wave_table[i] * v_peak_to_peak / v_ref;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	3282      	adds	r2, #130	; 0x82
 8001b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc69 	bl	8000474 <__aeabi_ui2d>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001ba8:	3360      	adds	r3, #96	; 0x60
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	f7fe fcdb 	bl	8000568 <__aeabi_dmul>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001bc0:	3358      	adds	r3, #88	; 0x58
 8001bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc6:	f7fe fdf9 	bl	80007bc <__aeabi_ddiv>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7fe ff8b 	bl	8000aec <__aeabi_d2uiz>
 8001bd6:	4601      	mov	r1, r0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	3282      	adds	r2, #130	; 0x82
 8001bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(uint32_t i=0; i<num_of_samples; i++){
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3301      	adds	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	e7cd      	b.n	8001b86 <_ZN5Synth6updateEh+0x8a>
		}

		HAL_DAC_Stop_DMA(hdac, Channel);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001bf0:	334c      	adds	r3, #76	; 0x4c
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001bfa:	3350      	adds	r3, #80	; 0x50
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4610      	mov	r0, r2
 8001c02:	f000 fc73 	bl	80024ec <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(hdac, Channel, wave_table, num_of_samples, DAC_ALIGN_12B_R);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001c0c:	334c      	adds	r3, #76	; 0x4c
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001c16:	3350      	adds	r3, #80	; 0x50
 8001c18:	6819      	ldr	r1, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f503 7202 	add.w	r2, r3, #520	; 0x208
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c26:	2400      	movs	r4, #0
 8001c28:	9400      	str	r4, [sp, #0]
 8001c2a:	f000 fb91 	bl	8002350 <HAL_DAC_Start_DMA>
	}else HAL_DAC_Stop_DMA(hdac, Channel);
}
 8001c2e:	e00d      	b.n	8001c4c <_ZN5Synth6updateEh+0x150>
	}else HAL_DAC_Stop_DMA(hdac, Channel);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001c36:	334c      	adds	r3, #76	; 0x4c
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001c40:	3350      	adds	r3, #80	; 0x50
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	4610      	mov	r0, r2
 8001c48:	f000 fc50 	bl	80024ec <HAL_DAC_Stop_DMA>
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}
 8001c54:	00989680 	.word	0x00989680

08001c58 <_ZN5Synth6configEh>:

void Synth::config(uint8_t note){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
	if(note != 0){
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d068      	beq.n	8001d3c <_ZN5Synth6configEh+0xe4>
		//wawe select
		if(note == 71){
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	2b47      	cmp	r3, #71	; 0x47
 8001c6e:	d109      	bne.n	8001c84 <_ZN5Synth6configEh+0x2c>
			wave_type = 0;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001c76:	3348      	adds	r3, #72	; 0x48
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
			update(69);
 8001c7c:	2145      	movs	r1, #69	; 0x45
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ff3c 	bl	8001afc <_ZN5Synth6updateEh>
		}
		if(note == 70){
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	2b46      	cmp	r3, #70	; 0x46
 8001c88:	d109      	bne.n	8001c9e <_ZN5Synth6configEh+0x46>
			wave_type = 1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001c90:	3348      	adds	r3, #72	; 0x48
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
			update(69);
 8001c96:	2145      	movs	r1, #69	; 0x45
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff2f 	bl	8001afc <_ZN5Synth6updateEh>
		}
		if(note == 69){
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	2b45      	cmp	r3, #69	; 0x45
 8001ca2:	d109      	bne.n	8001cb8 <_ZN5Synth6configEh+0x60>
			wave_type = 2;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001caa:	3348      	adds	r3, #72	; 0x48
 8001cac:	2202      	movs	r2, #2
 8001cae:	701a      	strb	r2, [r3, #0]
			update(69);
 8001cb0:	2145      	movs	r1, #69	; 0x45
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ff22 	bl	8001afc <_ZN5Synth6updateEh>
		}
		if(note == 68){
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	2b44      	cmp	r3, #68	; 0x44
 8001cbc:	d109      	bne.n	8001cd2 <_ZN5Synth6configEh+0x7a>
			wave_type = 3;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001cc4:	3348      	adds	r3, #72	; 0x48
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	701a      	strb	r2, [r3, #0]
			update(69);
 8001cca:	2145      	movs	r1, #69	; 0x45
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff15 	bl	8001afc <_ZN5Synth6updateEh>
		}
		//pitch select
		if(note == 66){
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	2b42      	cmp	r3, #66	; 0x42
 8001cd6:	d109      	bne.n	8001cec <_ZN5Synth6configEh+0x94>
			pitch = -24;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001cde:	3349      	adds	r3, #73	; 0x49
 8001ce0:	22e8      	movs	r2, #232	; 0xe8
 8001ce2:	701a      	strb	r2, [r3, #0]
			update(69);
 8001ce4:	2145      	movs	r1, #69	; 0x45
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ff08 	bl	8001afc <_ZN5Synth6updateEh>
		}
		if(note == 65){
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	2b41      	cmp	r3, #65	; 0x41
 8001cf0:	d109      	bne.n	8001d06 <_ZN5Synth6configEh+0xae>
			pitch = -12;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001cf8:	3349      	adds	r3, #73	; 0x49
 8001cfa:	22f4      	movs	r2, #244	; 0xf4
 8001cfc:	701a      	strb	r2, [r3, #0]
			update(69);
 8001cfe:	2145      	movs	r1, #69	; 0x45
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff fefb 	bl	8001afc <_ZN5Synth6updateEh>
		}
		if(note == 64){
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	2b40      	cmp	r3, #64	; 0x40
 8001d0a:	d109      	bne.n	8001d20 <_ZN5Synth6configEh+0xc8>
			pitch = 0;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001d12:	3349      	adds	r3, #73	; 0x49
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
			update(69);
 8001d18:	2145      	movs	r1, #69	; 0x45
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff feee 	bl	8001afc <_ZN5Synth6updateEh>
		}
		if(note == 63){
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	2b3f      	cmp	r3, #63	; 0x3f
 8001d24:	d10e      	bne.n	8001d44 <_ZN5Synth6configEh+0xec>
			pitch = 12;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8001d2c:	3349      	adds	r3, #73	; 0x49
 8001d2e:	220c      	movs	r2, #12
 8001d30:	701a      	strb	r2, [r3, #0]
			update(69);
 8001d32:	2145      	movs	r1, #69	; 0x45
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff fee1 	bl	8001afc <_ZN5Synth6updateEh>
		}

	}else update(0);
}
 8001d3a:	e003      	b.n	8001d44 <_ZN5Synth6configEh+0xec>
	}else update(0);
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fedc 	bl	8001afc <_ZN5Synth6updateEh>
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	0000      	movs	r0, r0
	...

08001d50 <_ZN5Synth12generate_sinEv>:

void Synth::generate_sin()
{
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i<num_of_samples; i++){
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d24d      	bcs.n	8001e04 <_ZN5Synth12generate_sinEv+0xb4>
		wave_table[i] = (4095 * (sin(i*2*M_PI/num_of_samples) + 1) / 2);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fb81 	bl	8000474 <__aeabi_ui2d>
 8001d72:	a32a      	add	r3, pc, #168	; (adr r3, 8001e1c <_ZN5Synth12generate_sinEv+0xcc>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	f7fe fbf6 	bl	8000568 <__aeabi_dmul>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4614      	mov	r4, r2
 8001d82:	461d      	mov	r5, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fb72 	bl	8000474 <__aeabi_ui2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4620      	mov	r0, r4
 8001d96:	4629      	mov	r1, r5
 8001d98:	f7fe fd10 	bl	80007bc <__aeabi_ddiv>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	ec43 2b17 	vmov	d7, r2, r3
 8001da4:	eeb0 0a47 	vmov.f32	s0, s14
 8001da8:	eef0 0a67 	vmov.f32	s1, s15
 8001dac:	f002 fcc4 	bl	8004738 <sin>
 8001db0:	ec51 0b10 	vmov	r0, r1, d0
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <_ZN5Synth12generate_sinEv+0xc8>)
 8001dba:	f7fe fa1f 	bl	80001fc <__adddf3>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	a312      	add	r3, pc, #72	; (adr r3, 8001e10 <_ZN5Synth12generate_sinEv+0xc0>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fbcc 	bl	8000568 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001de0:	f7fe fcec 	bl	80007bc <__aeabi_ddiv>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7fe fe7e 	bl	8000aec <__aeabi_d2uiz>
 8001df0:	4601      	mov	r1, r0
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	3282      	adds	r2, #130	; 0x82
 8001df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t i=0; i<num_of_samples; i++){
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e7ab      	b.n	8001d5c <_ZN5Synth12generate_sinEv+0xc>
	}
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0c:	f3af 8000 	nop.w
 8001e10:	00000000 	.word	0x00000000
 8001e14:	40affe00 	.word	0x40affe00
 8001e18:	3ff00000 	.word	0x3ff00000
 8001e1c:	54442d18 	.word	0x54442d18
 8001e20:	400921fb 	.word	0x400921fb

08001e24 <_ZN5Synth17generate_triangleEv>:

void Synth::generate_triangle()
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i<num_of_samples; i++){
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d22e      	bcs.n	8001e9a <_ZN5Synth17generate_triangleEv+0x76>
		if(i <= num_of_samples/2) wave_table[i] = (4095 * 2 * i / num_of_samples);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d810      	bhi.n	8001e6c <_ZN5Synth17generate_triangleEv+0x48>
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	031b      	lsls	r3, r3, #12
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	461a      	mov	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	3282      	adds	r2, #130	; 0x82
 8001e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001e6a:	e012      	b.n	8001e92 <_ZN5Synth17generate_triangleEv+0x6e>
		else wave_table[i] = (4095-(4095 * 2 * i / num_of_samples));
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	031b      	lsls	r3, r3, #12
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	461a      	mov	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e82:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e86:	330f      	adds	r3, #15
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	68f9      	ldr	r1, [r7, #12]
 8001e8c:	3182      	adds	r1, #130	; 0x82
 8001e8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for(uint32_t i=0; i<num_of_samples; i++){
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3301      	adds	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e7ca      	b.n	8001e30 <_ZN5Synth17generate_triangleEv+0xc>
	}
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <_ZN5Synth15generate_squareEv>:

void Synth::generate_square()
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i<num_of_samples; i++){
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d218      	bcs.n	8001ef0 <_ZN5Synth15generate_squareEv+0x4a>
		if(i <= num_of_samples/2) wave_table[i] = 0;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ec4:	085b      	lsrs	r3, r3, #1
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d806      	bhi.n	8001eda <_ZN5Synth15generate_squareEv+0x34>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	3282      	adds	r2, #130	; 0x82
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001ed8:	e006      	b.n	8001ee8 <_ZN5Synth15generate_squareEv+0x42>
		else wave_table[i] = 4095 / 1.6;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	3282      	adds	r2, #130	; 0x82
 8001ee0:	f640 11ff 	movw	r1, #2559	; 0x9ff
 8001ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t i=0; i<num_of_samples; i++){
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3301      	adds	r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	e7e0      	b.n	8001eb2 <_ZN5Synth15generate_squareEv+0xc>
	}
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_ZN5Synth12generate_sawEv>:

void Synth::generate_saw()
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i<num_of_samples; i++){
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d211      	bcs.n	8001f38 <_ZN5Synth12generate_sawEv+0x3c>
		wave_table[i] = (4095 * i / num_of_samples);
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4613      	mov	r3, r2
 8001f18:	031b      	lsls	r3, r3, #12
 8001f1a:	1a9a      	subs	r2, r3, r2
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f22:	fbb2 f1f3 	udiv	r1, r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	3282      	adds	r2, #130	; 0x82
 8001f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t i=0; i<num_of_samples; i++){
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3301      	adds	r3, #1
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	e7e7      	b.n	8001f08 <_ZN5Synth12generate_sawEv+0xc>
	}
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <SystemInit+0x20>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <SystemInit+0x20>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f6c:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f6e:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f70:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f84:	4c0b      	ldr	r4, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f92:	f7ff ffd7 	bl	8001f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f96:	f003 fc05 	bl	80057a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9a:	f7ff f8f5 	bl	8001188 <main>
  bx  lr    
 8001f9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fa0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fac:	08005c40 	.word	0x08005c40
  ldr r2, =_sbss
 8001fb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fb4:	2000012c 	.word	0x2000012c

08001fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC_IRQHandler>
	...

08001fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_Init+0x40>)
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_Init+0x40>)
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_Init+0x40>)
 8001fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f000 f94f 	bl	8002288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fea:	2000      	movs	r0, #0
 8001fec:	f000 f808 	bl	8002000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff0:	f7ff fbfa 	bl	80017e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_InitTick+0x54>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_InitTick+0x58>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002016:	fbb3 f3f1 	udiv	r3, r3, r1
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f967 	bl	80022f2 <HAL_SYSTICK_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e00e      	b.n	800204c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b0f      	cmp	r3, #15
 8002032:	d80a      	bhi.n	800204a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002034:	2200      	movs	r2, #0
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f000 f92f 	bl	800229e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002040:	4a06      	ldr	r2, [pc, #24]	; (800205c <HAL_InitTick+0x5c>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000000 	.word	0x20000000
 8002058:	20000008 	.word	0x20000008
 800205c:	20000004 	.word	0x20000004

08002060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x20>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_IncTick+0x24>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4413      	add	r3, r2
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_IncTick+0x24>)
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000008 	.word	0x20000008
 8002084:	20000128 	.word	0x20000128

08002088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return uwTick;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_GetTick+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000128 	.word	0x20000128

080020a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff ffee 	bl	8002088 <HAL_GetTick>
 80020ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d005      	beq.n	80020c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_Delay+0x44>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020c6:	bf00      	nop
 80020c8:	f7ff ffde 	bl	8002088 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d8f7      	bhi.n	80020c8 <HAL_Delay+0x28>
  {
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000008 	.word	0x20000008

080020e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <__NVIC_SetPriorityGrouping+0x44>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002104:	4013      	ands	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211a:	4a04      	ldr	r2, [pc, #16]	; (800212c <__NVIC_SetPriorityGrouping+0x44>)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	60d3      	str	r3, [r2, #12]
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <__NVIC_GetPriorityGrouping+0x18>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	f003 0307 	and.w	r3, r3, #7
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	2b00      	cmp	r3, #0
 800215c:	db0b      	blt.n	8002176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	f003 021f 	and.w	r2, r3, #31
 8002164:	4907      	ldr	r1, [pc, #28]	; (8002184 <__NVIC_EnableIRQ+0x38>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	2001      	movs	r0, #1
 800216e:	fa00 f202 	lsl.w	r2, r0, r2
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000e100 	.word	0xe000e100

08002188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0a      	blt.n	80021b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	490c      	ldr	r1, [pc, #48]	; (80021d4 <__NVIC_SetPriority+0x4c>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	440b      	add	r3, r1
 80021ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b0:	e00a      	b.n	80021c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4908      	ldr	r1, [pc, #32]	; (80021d8 <__NVIC_SetPriority+0x50>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3b04      	subs	r3, #4
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	761a      	strb	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f1c3 0307 	rsb	r3, r3, #7
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	bf28      	it	cs
 80021fa:	2304      	movcs	r3, #4
 80021fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3304      	adds	r3, #4
 8002202:	2b06      	cmp	r3, #6
 8002204:	d902      	bls.n	800220c <NVIC_EncodePriority+0x30>
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3b03      	subs	r3, #3
 800220a:	e000      	b.n	800220e <NVIC_EncodePriority+0x32>
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	f04f 32ff 	mov.w	r2, #4294967295
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002224:	f04f 31ff 	mov.w	r1, #4294967295
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43d9      	mvns	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	4313      	orrs	r3, r2
         );
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	; 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002254:	d301      	bcc.n	800225a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002256:	2301      	movs	r3, #1
 8002258:	e00f      	b.n	800227a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <SysTick_Config+0x40>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002262:	210f      	movs	r1, #15
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	f7ff ff8e 	bl	8002188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <SysTick_Config+0x40>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002272:	4b04      	ldr	r3, [pc, #16]	; (8002284 <SysTick_Config+0x40>)
 8002274:	2207      	movs	r2, #7
 8002276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	e000e010 	.word	0xe000e010

08002288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ff29 	bl	80020e8 <__NVIC_SetPriorityGrouping>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	4603      	mov	r3, r0
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b0:	f7ff ff3e 	bl	8002130 <__NVIC_GetPriorityGrouping>
 80022b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	6978      	ldr	r0, [r7, #20]
 80022bc:	f7ff ff8e 	bl	80021dc <NVIC_EncodePriority>
 80022c0:	4602      	mov	r2, r0
 80022c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff5d 	bl	8002188 <__NVIC_SetPriority>
}
 80022ce:	bf00      	nop
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	4603      	mov	r3, r0
 80022de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff31 	bl	800214c <__NVIC_EnableIRQ>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ffa2 	bl	8002244 <SysTick_Config>
 8002300:	4603      	mov	r3, r0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e014      	b.n	8002346 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	791b      	ldrb	r3, [r3, #4]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d105      	bne.n	8002332 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff fa83 	bl	8001838 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2202      	movs	r2, #2
 8002336:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	795b      	ldrb	r3, [r3, #5]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_DAC_Start_DMA+0x22>
 800236e:	2302      	movs	r3, #2
 8002370:	e0ab      	b.n	80024ca <HAL_DAC_Start_DMA+0x17a>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2202      	movs	r2, #2
 800237c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d12f      	bne.n	80023e4 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_DAC_Start_DMA+0x184>)
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a51      	ldr	r2, [pc, #324]	; (80024d8 <HAL_DAC_Start_DMA+0x188>)
 8002392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a50      	ldr	r2, [pc, #320]	; (80024dc <HAL_DAC_Start_DMA+0x18c>)
 800239a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023aa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d013      	beq.n	80023da <HAL_DAC_Start_DMA+0x8a>
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d845      	bhi.n	8002444 <HAL_DAC_Start_DMA+0xf4>
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_DAC_Start_DMA+0x76>
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d005      	beq.n	80023d0 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80023c4:	e03e      	b.n	8002444 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3308      	adds	r3, #8
 80023cc:	613b      	str	r3, [r7, #16]
        break;
 80023ce:	e03c      	b.n	800244a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	330c      	adds	r3, #12
 80023d6:	613b      	str	r3, [r7, #16]
        break;
 80023d8:	e037      	b.n	800244a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3310      	adds	r3, #16
 80023e0:	613b      	str	r3, [r7, #16]
        break;
 80023e2:	e032      	b.n	800244a <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a3d      	ldr	r2, [pc, #244]	; (80024e0 <HAL_DAC_Start_DMA+0x190>)
 80023ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a3c      	ldr	r2, [pc, #240]	; (80024e4 <HAL_DAC_Start_DMA+0x194>)
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a3b      	ldr	r2, [pc, #236]	; (80024e8 <HAL_DAC_Start_DMA+0x198>)
 80023fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800240a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	2b08      	cmp	r3, #8
 8002410:	d013      	beq.n	800243a <HAL_DAC_Start_DMA+0xea>
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d817      	bhi.n	8002448 <HAL_DAC_Start_DMA+0xf8>
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_DAC_Start_DMA+0xd6>
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	2b04      	cmp	r3, #4
 8002422:	d005      	beq.n	8002430 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002424:	e010      	b.n	8002448 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3314      	adds	r3, #20
 800242c:	613b      	str	r3, [r7, #16]
        break;
 800242e:	e00c      	b.n	800244a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3318      	adds	r3, #24
 8002436:	613b      	str	r3, [r7, #16]
        break;
 8002438:	e007      	b.n	800244a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	331c      	adds	r3, #28
 8002440:	613b      	str	r3, [r7, #16]
        break;
 8002442:	e002      	b.n	800244a <HAL_DAC_Start_DMA+0xfa>
        break;
 8002444:	bf00      	nop
 8002446:	e000      	b.n	800244a <HAL_DAC_Start_DMA+0xfa>
        break;
 8002448:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d111      	bne.n	8002474 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800245e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6898      	ldr	r0, [r3, #8]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	f000 fa2d 	bl	80028c8 <HAL_DMA_Start_IT>
 800246e:	4603      	mov	r3, r0
 8002470:	75fb      	strb	r3, [r7, #23]
 8002472:	e010      	b.n	8002496 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002482:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	68d8      	ldr	r0, [r3, #12]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	f000 fa1b 	bl	80028c8 <HAL_DMA_Start_IT>
 8002492:	4603      	mov	r3, r0
 8002494:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6819      	ldr	r1, [r3, #0]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2201      	movs	r2, #1
 80024b0:	409a      	lsls	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e005      	b.n	80024c8 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f043 0204 	orr.w	r2, r3, #4
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	08002657 	.word	0x08002657
 80024d8:	08002679 	.word	0x08002679
 80024dc:	08002695 	.word	0x08002695
 80024e0:	080026ff 	.word	0x080026ff
 80024e4:	08002721 	.word	0x08002721
 80024e8:	0800273d 	.word	0x0800273d

080024ec <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43da      	mvns	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	400a      	ands	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6819      	ldr	r1, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2201      	movs	r2, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	400a      	ands	r2, r1
 800252e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10d      	bne.n	8002552 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fa1c 	bl	8002978 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e00c      	b.n	800256c <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fa0e 	bl	8002978 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800256a:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	795b      	ldrb	r3, [r3, #5]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_DAC_ConfigChannel+0x18>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e03c      	b.n	800264a <HAL_DAC_ConfigChannel+0x92>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2202      	movs	r2, #2
 80025da:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	f640 72fe 	movw	r2, #4094	; 0xffe
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4013      	ands	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6819      	ldr	r1, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	22c0      	movs	r2, #192	; 0xc0
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	400a      	ands	r2, r1
 800263a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f7ff ff89 	bl	800257c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	711a      	strb	r2, [r3, #4]
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f7ff ff82 	bl	8002590 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f043 0204 	orr.w	r2, r3, #4
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f7ff ff78 	bl	80025a4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	711a      	strb	r2, [r3, #4]
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f7ff ffd8 	bl	80026c2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	711a      	strb	r2, [r3, #4]
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f7ff ffd1 	bl	80026d6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f043 0204 	orr.w	r2, r3, #4
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff ffc7 	bl	80026ea <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	711a      	strb	r2, [r3, #4]
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002778:	f7ff fc86 	bl	8002088 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e099      	b.n	80028bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a8:	e00f      	b.n	80027ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027aa:	f7ff fc6d 	bl	8002088 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d908      	bls.n	80027ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e078      	b.n	80028bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1e8      	bne.n	80027aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <HAL_DMA_Init+0x158>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	2b04      	cmp	r3, #4
 8002822:	d107      	bne.n	8002834 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	4313      	orrs	r3, r2
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f023 0307 	bic.w	r3, r3, #7
 800284a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	2b04      	cmp	r3, #4
 800285c:	d117      	bne.n	800288e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00e      	beq.n	800288e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fadf 	bl	8002e34 <DMA_CheckFifoParam>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2240      	movs	r2, #64	; 0x40
 8002880:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800288a:	2301      	movs	r3, #1
 800288c:	e016      	b.n	80028bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fa96 	bl	8002dc8 <DMA_CalcBaseAndBitshift>
 800289c:	4603      	mov	r3, r0
 800289e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	223f      	movs	r2, #63	; 0x3f
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	f010803f 	.word	0xf010803f

080028c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_DMA_Start_IT+0x26>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e040      	b.n	8002970 <HAL_DMA_Start_IT+0xa8>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d12f      	bne.n	8002962 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2202      	movs	r2, #2
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fa28 	bl	8002d6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	223f      	movs	r2, #63	; 0x3f
 8002922:	409a      	lsls	r2, r3
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0216 	orr.w	r2, r2, #22
 8002936:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d007      	beq.n	8002950 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0208 	orr.w	r2, r2, #8
 800294e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e005      	b.n	800296e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800296a:	2302      	movs	r3, #2
 800296c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800296e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002986:	f7ff fb7f 	bl	8002088 <HAL_GetTick>
 800298a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d008      	beq.n	80029aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2280      	movs	r2, #128	; 0x80
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e052      	b.n	8002a50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0216 	bic.w	r2, r2, #22
 80029b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d103      	bne.n	80029da <HAL_DMA_Abort+0x62>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0208 	bic.w	r2, r2, #8
 80029e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fa:	e013      	b.n	8002a24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029fc:	f7ff fb44 	bl	8002088 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	d90c      	bls.n	8002a24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e015      	b.n	8002a50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1e4      	bne.n	80029fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	223f      	movs	r2, #63	; 0x3f
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a64:	4b92      	ldr	r3, [pc, #584]	; (8002cb0 <HAL_DMA_IRQHandler+0x258>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a92      	ldr	r2, [pc, #584]	; (8002cb4 <HAL_DMA_IRQHandler+0x25c>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	0a9b      	lsrs	r3, r3, #10
 8002a70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	2208      	movs	r2, #8
 8002a84:	409a      	lsls	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01a      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0204 	bic.w	r2, r2, #4
 8002aaa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	2201      	movs	r2, #1
 8002aca:	409a      	lsls	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d012      	beq.n	8002afa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00b      	beq.n	8002afa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	f043 0202 	orr.w	r2, r3, #2
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	2204      	movs	r2, #4
 8002b00:	409a      	lsls	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d012      	beq.n	8002b30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00b      	beq.n	8002b30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b28:	f043 0204 	orr.w	r2, r3, #4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	2210      	movs	r2, #16
 8002b36:	409a      	lsls	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d043      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d03c      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	2210      	movs	r2, #16
 8002b54:	409a      	lsls	r2, r3
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d018      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d108      	bne.n	8002b88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d024      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	4798      	blx	r3
 8002b86:	e01f      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01b      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
 8002b98:	e016      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d107      	bne.n	8002bb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0208 	bic.w	r2, r2, #8
 8002bb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	2220      	movs	r2, #32
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 808e 	beq.w	8002cf6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8086 	beq.w	8002cf6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bee:	2220      	movs	r2, #32
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b05      	cmp	r3, #5
 8002c00:	d136      	bne.n	8002c70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0216 	bic.w	r2, r2, #22
 8002c10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d103      	bne.n	8002c32 <HAL_DMA_IRQHandler+0x1da>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0208 	bic.w	r2, r2, #8
 8002c40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c46:	223f      	movs	r2, #63	; 0x3f
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d07d      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	4798      	blx	r3
        }
        return;
 8002c6e:	e078      	b.n	8002d62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01c      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d108      	bne.n	8002c9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d030      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
 8002c9c:	e02b      	b.n	8002cf6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d027      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
 8002cae:	e022      	b.n	8002cf6 <HAL_DMA_IRQHandler+0x29e>
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0210 	bic.w	r2, r2, #16
 8002cd4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d032      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d022      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2205      	movs	r2, #5
 8002d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	3301      	adds	r3, #1
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d307      	bcc.n	8002d3e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f2      	bne.n	8002d22 <HAL_DMA_IRQHandler+0x2ca>
 8002d3c:	e000      	b.n	8002d40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d3e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
 8002d60:	e000      	b.n	8002d64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d62:	bf00      	nop
    }
  }
}
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop

08002d6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b40      	cmp	r3, #64	; 0x40
 8002d98:	d108      	bne.n	8002dac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002daa:	e007      	b.n	8002dbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	60da      	str	r2, [r3, #12]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	3b10      	subs	r3, #16
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <DMA_CalcBaseAndBitshift+0x64>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002de2:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <DMA_CalcBaseAndBitshift+0x68>)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d909      	bls.n	8002e0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	1d1a      	adds	r2, r3, #4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	659a      	str	r2, [r3, #88]	; 0x58
 8002e08:	e007      	b.n	8002e1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e12:	f023 0303 	bic.w	r3, r3, #3
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	aaaaaaab 	.word	0xaaaaaaab
 8002e30:	08005a4c 	.word	0x08005a4c

08002e34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d11f      	bne.n	8002e8e <DMA_CheckFifoParam+0x5a>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d856      	bhi.n	8002f02 <DMA_CheckFifoParam+0xce>
 8002e54:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <DMA_CheckFifoParam+0x28>)
 8002e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5a:	bf00      	nop
 8002e5c:	08002e6d 	.word	0x08002e6d
 8002e60:	08002e7f 	.word	0x08002e7f
 8002e64:	08002e6d 	.word	0x08002e6d
 8002e68:	08002f03 	.word	0x08002f03
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d046      	beq.n	8002f06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7c:	e043      	b.n	8002f06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e86:	d140      	bne.n	8002f0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8c:	e03d      	b.n	8002f0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e96:	d121      	bne.n	8002edc <DMA_CheckFifoParam+0xa8>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d837      	bhi.n	8002f0e <DMA_CheckFifoParam+0xda>
 8002e9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <DMA_CheckFifoParam+0x70>)
 8002ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea4:	08002eb5 	.word	0x08002eb5
 8002ea8:	08002ebb 	.word	0x08002ebb
 8002eac:	08002eb5 	.word	0x08002eb5
 8002eb0:	08002ecd 	.word	0x08002ecd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb8:	e030      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d025      	beq.n	8002f12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eca:	e022      	b.n	8002f12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ed4:	d11f      	bne.n	8002f16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eda:	e01c      	b.n	8002f16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d903      	bls.n	8002eea <DMA_CheckFifoParam+0xb6>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d003      	beq.n	8002ef0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ee8:	e018      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
      break;
 8002eee:	e015      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00e      	beq.n	8002f1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      break;
 8002f00:	e00b      	b.n	8002f1a <DMA_CheckFifoParam+0xe6>
      break;
 8002f02:	bf00      	nop
 8002f04:	e00a      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      break;
 8002f06:	bf00      	nop
 8002f08:	e008      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e006      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e004      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      break;
 8002f12:	bf00      	nop
 8002f14:	e002      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f16:	bf00      	nop
 8002f18:	e000      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      break;
 8002f1a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop

08002f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	e177      	b.n	8003238 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f48:	2201      	movs	r2, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	f040 8166 	bne.w	8003232 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d005      	beq.n	8002f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d130      	bne.n	8002fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2203      	movs	r2, #3
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 0201 	and.w	r2, r3, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d017      	beq.n	800301c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d123      	bne.n	8003070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	08da      	lsrs	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3208      	adds	r2, #8
 8003030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	220f      	movs	r2, #15
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	08da      	lsrs	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3208      	adds	r2, #8
 800306a:	69b9      	ldr	r1, [r7, #24]
 800306c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0203 	and.w	r2, r3, #3
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80c0 	beq.w	8003232 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b66      	ldr	r3, [pc, #408]	; (8003250 <HAL_GPIO_Init+0x324>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	4a65      	ldr	r2, [pc, #404]	; (8003250 <HAL_GPIO_Init+0x324>)
 80030bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c0:	6453      	str	r3, [r2, #68]	; 0x44
 80030c2:	4b63      	ldr	r3, [pc, #396]	; (8003250 <HAL_GPIO_Init+0x324>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ce:	4a61      	ldr	r2, [pc, #388]	; (8003254 <HAL_GPIO_Init+0x328>)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	3302      	adds	r3, #2
 80030d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a58      	ldr	r2, [pc, #352]	; (8003258 <HAL_GPIO_Init+0x32c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d037      	beq.n	800316a <HAL_GPIO_Init+0x23e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a57      	ldr	r2, [pc, #348]	; (800325c <HAL_GPIO_Init+0x330>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d031      	beq.n	8003166 <HAL_GPIO_Init+0x23a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a56      	ldr	r2, [pc, #344]	; (8003260 <HAL_GPIO_Init+0x334>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02b      	beq.n	8003162 <HAL_GPIO_Init+0x236>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a55      	ldr	r2, [pc, #340]	; (8003264 <HAL_GPIO_Init+0x338>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d025      	beq.n	800315e <HAL_GPIO_Init+0x232>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a54      	ldr	r2, [pc, #336]	; (8003268 <HAL_GPIO_Init+0x33c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01f      	beq.n	800315a <HAL_GPIO_Init+0x22e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a53      	ldr	r2, [pc, #332]	; (800326c <HAL_GPIO_Init+0x340>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d019      	beq.n	8003156 <HAL_GPIO_Init+0x22a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_GPIO_Init+0x344>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_GPIO_Init+0x226>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a51      	ldr	r2, [pc, #324]	; (8003274 <HAL_GPIO_Init+0x348>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00d      	beq.n	800314e <HAL_GPIO_Init+0x222>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a50      	ldr	r2, [pc, #320]	; (8003278 <HAL_GPIO_Init+0x34c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <HAL_GPIO_Init+0x21e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4f      	ldr	r2, [pc, #316]	; (800327c <HAL_GPIO_Init+0x350>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <HAL_GPIO_Init+0x21a>
 8003142:	2309      	movs	r3, #9
 8003144:	e012      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003146:	230a      	movs	r3, #10
 8003148:	e010      	b.n	800316c <HAL_GPIO_Init+0x240>
 800314a:	2308      	movs	r3, #8
 800314c:	e00e      	b.n	800316c <HAL_GPIO_Init+0x240>
 800314e:	2307      	movs	r3, #7
 8003150:	e00c      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003152:	2306      	movs	r3, #6
 8003154:	e00a      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003156:	2305      	movs	r3, #5
 8003158:	e008      	b.n	800316c <HAL_GPIO_Init+0x240>
 800315a:	2304      	movs	r3, #4
 800315c:	e006      	b.n	800316c <HAL_GPIO_Init+0x240>
 800315e:	2303      	movs	r3, #3
 8003160:	e004      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003162:	2302      	movs	r3, #2
 8003164:	e002      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_GPIO_Init+0x240>
 800316a:	2300      	movs	r3, #0
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	f002 0203 	and.w	r2, r2, #3
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	4093      	lsls	r3, r2
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800317c:	4935      	ldr	r1, [pc, #212]	; (8003254 <HAL_GPIO_Init+0x328>)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	089b      	lsrs	r3, r3, #2
 8003182:	3302      	adds	r3, #2
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800318a:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <HAL_GPIO_Init+0x354>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ae:	4a34      	ldr	r2, [pc, #208]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031b4:	4b32      	ldr	r3, [pc, #200]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d8:	4a29      	ldr	r2, [pc, #164]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031de:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003202:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_GPIO_Init+0x354>)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_GPIO_Init+0x354>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800322c:	4a14      	ldr	r2, [pc, #80]	; (8003280 <HAL_GPIO_Init+0x354>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3301      	adds	r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2b0f      	cmp	r3, #15
 800323c:	f67f ae84 	bls.w	8002f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	3724      	adds	r7, #36	; 0x24
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	40013800 	.word	0x40013800
 8003258:	40020000 	.word	0x40020000
 800325c:	40020400 	.word	0x40020400
 8003260:	40020800 	.word	0x40020800
 8003264:	40020c00 	.word	0x40020c00
 8003268:	40021000 	.word	0x40021000
 800326c:	40021400 	.word	0x40021400
 8003270:	40021800 	.word	0x40021800
 8003274:	40021c00 	.word	0x40021c00
 8003278:	40022000 	.word	0x40022000
 800327c:	40022400 	.word	0x40022400
 8003280:	40013c00 	.word	0x40013c00

08003284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	887b      	ldrh	r3, [r7, #2]
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	e001      	b.n	80032a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
 80032c0:	4613      	mov	r3, r2
 80032c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c4:	787b      	ldrb	r3, [r7, #1]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032d0:	e003      	b.n	80032da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	041a      	lsls	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	619a      	str	r2, [r3, #24]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032f8:	887a      	ldrh	r2, [r7, #2]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	041a      	lsls	r2, r3, #16
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	43d9      	mvns	r1, r3
 8003304:	887b      	ldrh	r3, [r7, #2]
 8003306:	400b      	ands	r3, r1
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	619a      	str	r2, [r3, #24]
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_PWREx_EnableOverDrive+0x90>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a1f      	ldr	r2, [pc, #124]	; (80033ac <HAL_PWREx_EnableOverDrive+0x90>)
 8003330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
 8003336:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <HAL_PWREx_EnableOverDrive+0x90>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003348:	f7fe fe9e 	bl	8002088 <HAL_GetTick>
 800334c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800334e:	e009      	b.n	8003364 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003350:	f7fe fe9a 	bl	8002088 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800335e:	d901      	bls.n	8003364 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e01f      	b.n	80033a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003364:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003370:	d1ee      	bne.n	8003350 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003378:	f7fe fe86 	bl	8002088 <HAL_GetTick>
 800337c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800337e:	e009      	b.n	8003394 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003380:	f7fe fe82 	bl	8002088 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800338e:	d901      	bls.n	8003394 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e007      	b.n	80033a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003394:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033a0:	d1ee      	bne.n	8003380 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40023800 	.word	0x40023800
 80033b0:	420e0040 	.word	0x420e0040
 80033b4:	40007000 	.word	0x40007000
 80033b8:	420e0044 	.word	0x420e0044

080033bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e264      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d075      	beq.n	80034c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033da:	4ba3      	ldr	r3, [pc, #652]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d00c      	beq.n	8003400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e6:	4ba0      	ldr	r3, [pc, #640]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d112      	bne.n	8003418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033f2:	4b9d      	ldr	r3, [pc, #628]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fe:	d10b      	bne.n	8003418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	4b99      	ldr	r3, [pc, #612]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d05b      	beq.n	80034c4 <HAL_RCC_OscConfig+0x108>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d157      	bne.n	80034c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e23f      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003420:	d106      	bne.n	8003430 <HAL_RCC_OscConfig+0x74>
 8003422:	4b91      	ldr	r3, [pc, #580]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a90      	ldr	r2, [pc, #576]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e01d      	b.n	800346c <HAL_RCC_OscConfig+0xb0>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x98>
 800343a:	4b8b      	ldr	r3, [pc, #556]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a8a      	ldr	r2, [pc, #552]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	4b88      	ldr	r3, [pc, #544]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a87      	ldr	r2, [pc, #540]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0xb0>
 8003454:	4b84      	ldr	r3, [pc, #528]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a83      	ldr	r2, [pc, #524]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 800345a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	4b81      	ldr	r3, [pc, #516]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a80      	ldr	r2, [pc, #512]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d013      	beq.n	800349c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fe fe08 	bl	8002088 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800347c:	f7fe fe04 	bl	8002088 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e204      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	4b76      	ldr	r3, [pc, #472]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0xc0>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fe fdf4 	bl	8002088 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fe fdf0 	bl	8002088 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e1f0      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	4b6c      	ldr	r3, [pc, #432]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0xe8>
 80034c2:	e000      	b.n	80034c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d063      	beq.n	800359a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034d2:	4b65      	ldr	r3, [pc, #404]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034de:	4b62      	ldr	r3, [pc, #392]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d11c      	bne.n	8003524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ea:	4b5f      	ldr	r3, [pc, #380]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d116      	bne.n	8003524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	4b5c      	ldr	r3, [pc, #368]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_RCC_OscConfig+0x152>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d001      	beq.n	800350e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e1c4      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350e:	4b56      	ldr	r3, [pc, #344]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4952      	ldr	r1, [pc, #328]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003522:	e03a      	b.n	800359a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800352c:	4b4f      	ldr	r3, [pc, #316]	; (800366c <HAL_RCC_OscConfig+0x2b0>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003532:	f7fe fda9 	bl	8002088 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800353a:	f7fe fda5 	bl	8002088 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e1a5      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	4b46      	ldr	r3, [pc, #280]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003558:	4b43      	ldr	r3, [pc, #268]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4940      	ldr	r1, [pc, #256]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	4313      	orrs	r3, r2
 800356a:	600b      	str	r3, [r1, #0]
 800356c:	e015      	b.n	800359a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356e:	4b3f      	ldr	r3, [pc, #252]	; (800366c <HAL_RCC_OscConfig+0x2b0>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fe fd88 	bl	8002088 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800357c:	f7fe fd84 	bl	8002088 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e184      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	4b36      	ldr	r3, [pc, #216]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d030      	beq.n	8003608 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ae:	4b30      	ldr	r3, [pc, #192]	; (8003670 <HAL_RCC_OscConfig+0x2b4>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7fe fd68 	bl	8002088 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035bc:	f7fe fd64 	bl	8002088 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e164      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	4b26      	ldr	r3, [pc, #152]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x200>
 80035da:	e015      	b.n	8003608 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035dc:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCC_OscConfig+0x2b4>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e2:	f7fe fd51 	bl	8002088 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ea:	f7fe fd4d 	bl	8002088 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e14d      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fc:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80035fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f0      	bne.n	80035ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80a0 	beq.w	8003756 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003616:	2300      	movs	r3, #0
 8003618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361a:	4b13      	ldr	r3, [pc, #76]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	4a0e      	ldr	r2, [pc, #56]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003634:	6413      	str	r3, [r2, #64]	; 0x40
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_OscConfig+0x2b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d121      	bne.n	8003696 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003652:	4b08      	ldr	r3, [pc, #32]	; (8003674 <HAL_RCC_OscConfig+0x2b8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a07      	ldr	r2, [pc, #28]	; (8003674 <HAL_RCC_OscConfig+0x2b8>)
 8003658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800365c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365e:	f7fe fd13 	bl	8002088 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003664:	e011      	b.n	800368a <HAL_RCC_OscConfig+0x2ce>
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800
 800366c:	42470000 	.word	0x42470000
 8003670:	42470e80 	.word	0x42470e80
 8003674:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003678:	f7fe fd06 	bl	8002088 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e106      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368a:	4b85      	ldr	r3, [pc, #532]	; (80038a0 <HAL_RCC_OscConfig+0x4e4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d106      	bne.n	80036ac <HAL_RCC_OscConfig+0x2f0>
 800369e:	4b81      	ldr	r3, [pc, #516]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	4a80      	ldr	r2, [pc, #512]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6713      	str	r3, [r2, #112]	; 0x70
 80036aa:	e01c      	b.n	80036e6 <HAL_RCC_OscConfig+0x32a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	d10c      	bne.n	80036ce <HAL_RCC_OscConfig+0x312>
 80036b4:	4b7b      	ldr	r3, [pc, #492]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4a7a      	ldr	r2, [pc, #488]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 80036ba:	f043 0304 	orr.w	r3, r3, #4
 80036be:	6713      	str	r3, [r2, #112]	; 0x70
 80036c0:	4b78      	ldr	r3, [pc, #480]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a77      	ldr	r2, [pc, #476]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	e00b      	b.n	80036e6 <HAL_RCC_OscConfig+0x32a>
 80036ce:	4b75      	ldr	r3, [pc, #468]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	4a74      	ldr	r2, [pc, #464]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	6713      	str	r3, [r2, #112]	; 0x70
 80036da:	4b72      	ldr	r3, [pc, #456]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a71      	ldr	r2, [pc, #452]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 80036e0:	f023 0304 	bic.w	r3, r3, #4
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d015      	beq.n	800371a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ee:	f7fe fccb 	bl	8002088 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fe fcc7 	bl	8002088 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e0c5      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370c:	4b65      	ldr	r3, [pc, #404]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ee      	beq.n	80036f6 <HAL_RCC_OscConfig+0x33a>
 8003718:	e014      	b.n	8003744 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371a:	f7fe fcb5 	bl	8002088 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003720:	e00a      	b.n	8003738 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003722:	f7fe fcb1 	bl	8002088 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	4293      	cmp	r3, r2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e0af      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003738:	4b5a      	ldr	r3, [pc, #360]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ee      	bne.n	8003722 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d105      	bne.n	8003756 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374a:	4b56      	ldr	r3, [pc, #344]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	4a55      	ldr	r2, [pc, #340]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 8003750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003754:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 809b 	beq.w	8003896 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003760:	4b50      	ldr	r3, [pc, #320]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b08      	cmp	r3, #8
 800376a:	d05c      	beq.n	8003826 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d141      	bne.n	80037f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003774:	4b4c      	ldr	r3, [pc, #304]	; (80038a8 <HAL_RCC_OscConfig+0x4ec>)
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377a:	f7fe fc85 	bl	8002088 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003782:	f7fe fc81 	bl	8002088 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e081      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003794:	4b43      	ldr	r3, [pc, #268]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f0      	bne.n	8003782 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	019b      	lsls	r3, r3, #6
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	3b01      	subs	r3, #1
 80037ba:	041b      	lsls	r3, r3, #16
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	061b      	lsls	r3, r3, #24
 80037c4:	4937      	ldr	r1, [pc, #220]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ca:	4b37      	ldr	r3, [pc, #220]	; (80038a8 <HAL_RCC_OscConfig+0x4ec>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fe fc5a 	bl	8002088 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d8:	f7fe fc56 	bl	8002088 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e056      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ea:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x41c>
 80037f6:	e04e      	b.n	8003896 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f8:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <HAL_RCC_OscConfig+0x4ec>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fe:	f7fe fc43 	bl	8002088 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003806:	f7fe fc3f 	bl	8002088 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e03f      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003818:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f0      	bne.n	8003806 <HAL_RCC_OscConfig+0x44a>
 8003824:	e037      	b.n	8003896 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e032      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <HAL_RCC_OscConfig+0x4e8>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d028      	beq.n	8003892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d121      	bne.n	8003892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d11a      	bne.n	8003892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003862:	4013      	ands	r3, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003868:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800386a:	4293      	cmp	r3, r2
 800386c:	d111      	bne.n	8003892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	3b01      	subs	r3, #1
 800387c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d107      	bne.n	8003892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d001      	beq.n	8003896 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40007000 	.word	0x40007000
 80038a4:	40023800 	.word	0x40023800
 80038a8:	42470060 	.word	0x42470060

080038ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0cc      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038c0:	4b68      	ldr	r3, [pc, #416]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d90c      	bls.n	80038e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b65      	ldr	r3, [pc, #404]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	4b63      	ldr	r3, [pc, #396]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0b8      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d020      	beq.n	8003936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003900:	4b59      	ldr	r3, [pc, #356]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4a58      	ldr	r2, [pc, #352]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800390a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003918:	4b53      	ldr	r3, [pc, #332]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a52      	ldr	r2, [pc, #328]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003924:	4b50      	ldr	r3, [pc, #320]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	494d      	ldr	r1, [pc, #308]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d044      	beq.n	80039cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d107      	bne.n	800395a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	4b47      	ldr	r3, [pc, #284]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d119      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e07f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d003      	beq.n	800396a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003966:	2b03      	cmp	r3, #3
 8003968:	d107      	bne.n	800397a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396a:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e06f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397a:	4b3b      	ldr	r3, [pc, #236]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e067      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800398a:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f023 0203 	bic.w	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4934      	ldr	r1, [pc, #208]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800399c:	f7fe fb74 	bl	8002088 <HAL_GetTick>
 80039a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a4:	f7fe fb70 	bl	8002088 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e04f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 020c 	and.w	r2, r3, #12
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d1eb      	bne.n	80039a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039cc:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d20c      	bcs.n	80039f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e032      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a00:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4916      	ldr	r1, [pc, #88]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	490e      	ldr	r1, [pc, #56]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a32:	f000 f821 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8003a36:	4602      	mov	r2, r0
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	490a      	ldr	r1, [pc, #40]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	5ccb      	ldrb	r3, [r1, r3]
 8003a46:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4a:	4a09      	ldr	r2, [pc, #36]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a4e:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <HAL_RCC_ClockConfig+0x1c8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fad4 	bl	8002000 <HAL_InitTick>

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40023c00 	.word	0x40023c00
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	08005a34 	.word	0x08005a34
 8003a70:	20000000 	.word	0x20000000
 8003a74:	20000004 	.word	0x20000004

08003a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a90:	4b67      	ldr	r3, [pc, #412]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d00d      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	f200 80bd 	bhi.w	8003c1c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_RCC_GetSysClockFreq+0x34>
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d003      	beq.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aaa:	e0b7      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aac:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003aae:	60bb      	str	r3, [r7, #8]
       break;
 8003ab0:	e0b7      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ab2:	4b61      	ldr	r3, [pc, #388]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ab4:	60bb      	str	r3, [r7, #8]
      break;
 8003ab6:	e0b4      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab8:	4b5d      	ldr	r3, [pc, #372]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ac0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ac2:	4b5b      	ldr	r3, [pc, #364]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d04d      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ace:	4b58      	ldr	r3, [pc, #352]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	099b      	lsrs	r3, r3, #6
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ade:	f04f 0100 	mov.w	r1, #0
 8003ae2:	ea02 0800 	and.w	r8, r2, r0
 8003ae6:	ea03 0901 	and.w	r9, r3, r1
 8003aea:	4640      	mov	r0, r8
 8003aec:	4649      	mov	r1, r9
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	014b      	lsls	r3, r1, #5
 8003af8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003afc:	0142      	lsls	r2, r0, #5
 8003afe:	4610      	mov	r0, r2
 8003b00:	4619      	mov	r1, r3
 8003b02:	ebb0 0008 	subs.w	r0, r0, r8
 8003b06:	eb61 0109 	sbc.w	r1, r1, r9
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	018b      	lsls	r3, r1, #6
 8003b14:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b18:	0182      	lsls	r2, r0, #6
 8003b1a:	1a12      	subs	r2, r2, r0
 8003b1c:	eb63 0301 	sbc.w	r3, r3, r1
 8003b20:	f04f 0000 	mov.w	r0, #0
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	00d9      	lsls	r1, r3, #3
 8003b2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b2e:	00d0      	lsls	r0, r2, #3
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	eb12 0208 	adds.w	r2, r2, r8
 8003b38:	eb43 0309 	adc.w	r3, r3, r9
 8003b3c:	f04f 0000 	mov.w	r0, #0
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	0259      	lsls	r1, r3, #9
 8003b46:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b4a:	0250      	lsls	r0, r2, #9
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	f7fc ffe6 	bl	8000b2c <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4613      	mov	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	e04a      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6a:	4b31      	ldr	r3, [pc, #196]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	099b      	lsrs	r3, r3, #6
 8003b70:	461a      	mov	r2, r3
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b7a:	f04f 0100 	mov.w	r1, #0
 8003b7e:	ea02 0400 	and.w	r4, r2, r0
 8003b82:	ea03 0501 	and.w	r5, r3, r1
 8003b86:	4620      	mov	r0, r4
 8003b88:	4629      	mov	r1, r5
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	014b      	lsls	r3, r1, #5
 8003b94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b98:	0142      	lsls	r2, r0, #5
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	1b00      	subs	r0, r0, r4
 8003ba0:	eb61 0105 	sbc.w	r1, r1, r5
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	018b      	lsls	r3, r1, #6
 8003bae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bb2:	0182      	lsls	r2, r0, #6
 8003bb4:	1a12      	subs	r2, r2, r0
 8003bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bba:	f04f 0000 	mov.w	r0, #0
 8003bbe:	f04f 0100 	mov.w	r1, #0
 8003bc2:	00d9      	lsls	r1, r3, #3
 8003bc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bc8:	00d0      	lsls	r0, r2, #3
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	1912      	adds	r2, r2, r4
 8003bd0:	eb45 0303 	adc.w	r3, r5, r3
 8003bd4:	f04f 0000 	mov.w	r0, #0
 8003bd8:	f04f 0100 	mov.w	r1, #0
 8003bdc:	0299      	lsls	r1, r3, #10
 8003bde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003be2:	0290      	lsls	r0, r2, #10
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	f7fc ff9a 	bl	8000b2c <__aeabi_uldivmod>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	60bb      	str	r3, [r7, #8]
      break;
 8003c1a:	e002      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c1e:	60bb      	str	r3, [r7, #8]
      break;
 8003c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c22:	68bb      	ldr	r3, [r7, #8]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800
 8003c34:	00f42400 	.word	0x00f42400
 8003c38:	007a1200 	.word	0x007a1200

08003c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000000 	.word	0x20000000

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c58:	f7ff fff0 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	0a9b      	lsrs	r3, r3, #10
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4903      	ldr	r1, [pc, #12]	; (8003c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40023800 	.word	0x40023800
 8003c78:	08005a44 	.word	0x08005a44

08003c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c80:	f7ff ffdc 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0b5b      	lsrs	r3, r3, #13
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4903      	ldr	r1, [pc, #12]	; (8003ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	08005a44 	.word	0x08005a44

08003ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e041      	b.n	8003d3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fd fe2c 	bl	8001928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	f000 f95a 	bl	8003f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d001      	beq.n	8003d5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e046      	b.n	8003dea <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a23      	ldr	r2, [pc, #140]	; (8003df8 <HAL_TIM_Base_Start+0xb4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d022      	beq.n	8003db4 <HAL_TIM_Base_Start+0x70>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d01d      	beq.n	8003db4 <HAL_TIM_Base_Start+0x70>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1f      	ldr	r2, [pc, #124]	; (8003dfc <HAL_TIM_Base_Start+0xb8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d018      	beq.n	8003db4 <HAL_TIM_Base_Start+0x70>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a1e      	ldr	r2, [pc, #120]	; (8003e00 <HAL_TIM_Base_Start+0xbc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d013      	beq.n	8003db4 <HAL_TIM_Base_Start+0x70>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <HAL_TIM_Base_Start+0xc0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00e      	beq.n	8003db4 <HAL_TIM_Base_Start+0x70>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1b      	ldr	r2, [pc, #108]	; (8003e08 <HAL_TIM_Base_Start+0xc4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d009      	beq.n	8003db4 <HAL_TIM_Base_Start+0x70>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a19      	ldr	r2, [pc, #100]	; (8003e0c <HAL_TIM_Base_Start+0xc8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_TIM_Base_Start+0x70>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_TIM_Base_Start+0xcc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d111      	bne.n	8003dd8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b06      	cmp	r3, #6
 8003dc4:	d010      	beq.n	8003de8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0201 	orr.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd6:	e007      	b.n	8003de8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40000800 	.word	0x40000800
 8003e04:	40000c00 	.word	0x40000c00
 8003e08:	40010400 	.word	0x40010400
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40001800 	.word	0x40001800

08003e14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_TIM_ConfigClockSource+0x18>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e0b3      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x180>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e64:	d03e      	beq.n	8003ee4 <HAL_TIM_ConfigClockSource+0xd0>
 8003e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6a:	f200 8087 	bhi.w	8003f7c <HAL_TIM_ConfigClockSource+0x168>
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	f000 8085 	beq.w	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7a:	d87f      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x168>
 8003e7c:	2b70      	cmp	r3, #112	; 0x70
 8003e7e:	d01a      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0xa2>
 8003e80:	2b70      	cmp	r3, #112	; 0x70
 8003e82:	d87b      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x168>
 8003e84:	2b60      	cmp	r3, #96	; 0x60
 8003e86:	d050      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x116>
 8003e88:	2b60      	cmp	r3, #96	; 0x60
 8003e8a:	d877      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x168>
 8003e8c:	2b50      	cmp	r3, #80	; 0x50
 8003e8e:	d03c      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0xf6>
 8003e90:	2b50      	cmp	r3, #80	; 0x50
 8003e92:	d873      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x168>
 8003e94:	2b40      	cmp	r3, #64	; 0x40
 8003e96:	d058      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x136>
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d86f      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x168>
 8003e9c:	2b30      	cmp	r3, #48	; 0x30
 8003e9e:	d064      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x156>
 8003ea0:	2b30      	cmp	r3, #48	; 0x30
 8003ea2:	d86b      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x168>
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d060      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x156>
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d867      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x168>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05c      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x156>
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d05a      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003eb4:	e062      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6899      	ldr	r1, [r3, #8]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f000 f983 	bl	80041d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ed8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	609a      	str	r2, [r3, #8]
      break;
 8003ee2:	e04e      	b.n	8003f82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6899      	ldr	r1, [r3, #8]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f000 f96c 	bl	80041d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f06:	609a      	str	r2, [r3, #8]
      break;
 8003f08:	e03b      	b.n	8003f82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6859      	ldr	r1, [r3, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f000 f8e0 	bl	80040dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2150      	movs	r1, #80	; 0x50
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f939 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003f28:	e02b      	b.n	8003f82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6859      	ldr	r1, [r3, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f000 f8ff 	bl	800413a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2160      	movs	r1, #96	; 0x60
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f929 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003f48:	e01b      	b.n	8003f82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6859      	ldr	r1, [r3, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f000 f8c0 	bl	80040dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2140      	movs	r1, #64	; 0x40
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f919 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003f68:	e00b      	b.n	8003f82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f000 f910 	bl	800419a <TIM_ITRx_SetConfig>
        break;
 8003f7a:	e002      	b.n	8003f82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f7c:	bf00      	nop
 8003f7e:	e000      	b.n	8003f82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a40      	ldr	r2, [pc, #256]	; (80040b0 <TIM_Base_SetConfig+0x114>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d013      	beq.n	8003fdc <TIM_Base_SetConfig+0x40>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fba:	d00f      	beq.n	8003fdc <TIM_Base_SetConfig+0x40>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a3d      	ldr	r2, [pc, #244]	; (80040b4 <TIM_Base_SetConfig+0x118>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00b      	beq.n	8003fdc <TIM_Base_SetConfig+0x40>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a3c      	ldr	r2, [pc, #240]	; (80040b8 <TIM_Base_SetConfig+0x11c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d007      	beq.n	8003fdc <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a3b      	ldr	r2, [pc, #236]	; (80040bc <TIM_Base_SetConfig+0x120>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d003      	beq.n	8003fdc <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3a      	ldr	r2, [pc, #232]	; (80040c0 <TIM_Base_SetConfig+0x124>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d108      	bne.n	8003fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a2f      	ldr	r2, [pc, #188]	; (80040b0 <TIM_Base_SetConfig+0x114>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d02b      	beq.n	800404e <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffc:	d027      	beq.n	800404e <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a2c      	ldr	r2, [pc, #176]	; (80040b4 <TIM_Base_SetConfig+0x118>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d023      	beq.n	800404e <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2b      	ldr	r2, [pc, #172]	; (80040b8 <TIM_Base_SetConfig+0x11c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d01f      	beq.n	800404e <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a2a      	ldr	r2, [pc, #168]	; (80040bc <TIM_Base_SetConfig+0x120>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d01b      	beq.n	800404e <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a29      	ldr	r2, [pc, #164]	; (80040c0 <TIM_Base_SetConfig+0x124>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d017      	beq.n	800404e <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a28      	ldr	r2, [pc, #160]	; (80040c4 <TIM_Base_SetConfig+0x128>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d013      	beq.n	800404e <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a27      	ldr	r2, [pc, #156]	; (80040c8 <TIM_Base_SetConfig+0x12c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00f      	beq.n	800404e <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a26      	ldr	r2, [pc, #152]	; (80040cc <TIM_Base_SetConfig+0x130>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00b      	beq.n	800404e <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a25      	ldr	r2, [pc, #148]	; (80040d0 <TIM_Base_SetConfig+0x134>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d007      	beq.n	800404e <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a24      	ldr	r2, [pc, #144]	; (80040d4 <TIM_Base_SetConfig+0x138>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d003      	beq.n	800404e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a23      	ldr	r2, [pc, #140]	; (80040d8 <TIM_Base_SetConfig+0x13c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d108      	bne.n	8004060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <TIM_Base_SetConfig+0x114>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_Base_SetConfig+0xf8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a0c      	ldr	r2, [pc, #48]	; (80040c0 <TIM_Base_SetConfig+0x124>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d103      	bne.n	800409c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	615a      	str	r2, [r3, #20]
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40000400 	.word	0x40000400
 80040b8:	40000800 	.word	0x40000800
 80040bc:	40000c00 	.word	0x40000c00
 80040c0:	40010400 	.word	0x40010400
 80040c4:	40014000 	.word	0x40014000
 80040c8:	40014400 	.word	0x40014400
 80040cc:	40014800 	.word	0x40014800
 80040d0:	40001800 	.word	0x40001800
 80040d4:	40001c00 	.word	0x40001c00
 80040d8:	40002000 	.word	0x40002000

080040dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f023 0201 	bic.w	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f023 030a 	bic.w	r3, r3, #10
 8004118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800413a:	b480      	push	{r7}
 800413c:	b087      	sub	sp, #28
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f023 0210 	bic.w	r2, r3, #16
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	031b      	lsls	r3, r3, #12
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004176:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f043 0307 	orr.w	r3, r3, #7
 80041bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	609a      	str	r2, [r3, #8]
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	021a      	lsls	r2, r3, #8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	609a      	str	r2, [r3, #8]
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004224:	2302      	movs	r3, #2
 8004226:	e05a      	b.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a21      	ldr	r2, [pc, #132]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d022      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004274:	d01d      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d018      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1b      	ldr	r2, [pc, #108]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1a      	ldr	r2, [pc, #104]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00e      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a18      	ldr	r2, [pc, #96]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d009      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a17      	ldr	r2, [pc, #92]	; (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d004      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a15      	ldr	r2, [pc, #84]	; (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d10c      	bne.n	80042cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40010000 	.word	0x40010000
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40000c00 	.word	0x40000c00
 80042fc:	40010400 	.word	0x40010400
 8004300:	40014000 	.word	0x40014000
 8004304:	40001800 	.word	0x40001800

08004308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e03f      	b.n	800439a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fd fb1a 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2224      	movs	r2, #36	; 0x24
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800434a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f829 	bl	80043a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a8:	b09f      	sub	sp, #124	; 0x7c
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ba:	68d9      	ldr	r1, [r3, #12]
 80043bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	ea40 0301 	orr.w	r3, r0, r1
 80043c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	4313      	orrs	r3, r2
 80043dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80043de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043e8:	f021 010c 	bic.w	r1, r1, #12
 80043ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043f2:	430b      	orrs	r3, r1
 80043f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004402:	6999      	ldr	r1, [r3, #24]
 8004404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	ea40 0301 	orr.w	r3, r0, r1
 800440c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800440e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4bc5      	ldr	r3, [pc, #788]	; (8004728 <UART_SetConfig+0x384>)
 8004414:	429a      	cmp	r2, r3
 8004416:	d004      	beq.n	8004422 <UART_SetConfig+0x7e>
 8004418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4bc3      	ldr	r3, [pc, #780]	; (800472c <UART_SetConfig+0x388>)
 800441e:	429a      	cmp	r2, r3
 8004420:	d103      	bne.n	800442a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004422:	f7ff fc2b 	bl	8003c7c <HAL_RCC_GetPCLK2Freq>
 8004426:	6778      	str	r0, [r7, #116]	; 0x74
 8004428:	e002      	b.n	8004430 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800442a:	f7ff fc13 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 800442e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004438:	f040 80b6 	bne.w	80045a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800443c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443e:	461c      	mov	r4, r3
 8004440:	f04f 0500 	mov.w	r5, #0
 8004444:	4622      	mov	r2, r4
 8004446:	462b      	mov	r3, r5
 8004448:	1891      	adds	r1, r2, r2
 800444a:	6439      	str	r1, [r7, #64]	; 0x40
 800444c:	415b      	adcs	r3, r3
 800444e:	647b      	str	r3, [r7, #68]	; 0x44
 8004450:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004454:	1912      	adds	r2, r2, r4
 8004456:	eb45 0303 	adc.w	r3, r5, r3
 800445a:	f04f 0000 	mov.w	r0, #0
 800445e:	f04f 0100 	mov.w	r1, #0
 8004462:	00d9      	lsls	r1, r3, #3
 8004464:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004468:	00d0      	lsls	r0, r2, #3
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	1911      	adds	r1, r2, r4
 8004470:	6639      	str	r1, [r7, #96]	; 0x60
 8004472:	416b      	adcs	r3, r5
 8004474:	667b      	str	r3, [r7, #100]	; 0x64
 8004476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	461a      	mov	r2, r3
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	1891      	adds	r1, r2, r2
 8004482:	63b9      	str	r1, [r7, #56]	; 0x38
 8004484:	415b      	adcs	r3, r3
 8004486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004488:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800448c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004490:	f7fc fb4c 	bl	8000b2c <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4ba5      	ldr	r3, [pc, #660]	; (8004730 <UART_SetConfig+0x38c>)
 800449a:	fba3 2302 	umull	r2, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	011e      	lsls	r6, r3, #4
 80044a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a4:	461c      	mov	r4, r3
 80044a6:	f04f 0500 	mov.w	r5, #0
 80044aa:	4622      	mov	r2, r4
 80044ac:	462b      	mov	r3, r5
 80044ae:	1891      	adds	r1, r2, r2
 80044b0:	6339      	str	r1, [r7, #48]	; 0x30
 80044b2:	415b      	adcs	r3, r3
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
 80044b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044ba:	1912      	adds	r2, r2, r4
 80044bc:	eb45 0303 	adc.w	r3, r5, r3
 80044c0:	f04f 0000 	mov.w	r0, #0
 80044c4:	f04f 0100 	mov.w	r1, #0
 80044c8:	00d9      	lsls	r1, r3, #3
 80044ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044ce:	00d0      	lsls	r0, r2, #3
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	1911      	adds	r1, r2, r4
 80044d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80044d8:	416b      	adcs	r3, r5
 80044da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	461a      	mov	r2, r3
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	1891      	adds	r1, r2, r2
 80044e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80044ea:	415b      	adcs	r3, r3
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80044f6:	f7fc fb19 	bl	8000b2c <__aeabi_uldivmod>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4b8c      	ldr	r3, [pc, #560]	; (8004730 <UART_SetConfig+0x38c>)
 8004500:	fba3 1302 	umull	r1, r3, r3, r2
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	2164      	movs	r1, #100	; 0x64
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	3332      	adds	r3, #50	; 0x32
 8004512:	4a87      	ldr	r2, [pc, #540]	; (8004730 <UART_SetConfig+0x38c>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004520:	441e      	add	r6, r3
 8004522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004524:	4618      	mov	r0, r3
 8004526:	f04f 0100 	mov.w	r1, #0
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	1894      	adds	r4, r2, r2
 8004530:	623c      	str	r4, [r7, #32]
 8004532:	415b      	adcs	r3, r3
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
 8004536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800453a:	1812      	adds	r2, r2, r0
 800453c:	eb41 0303 	adc.w	r3, r1, r3
 8004540:	f04f 0400 	mov.w	r4, #0
 8004544:	f04f 0500 	mov.w	r5, #0
 8004548:	00dd      	lsls	r5, r3, #3
 800454a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800454e:	00d4      	lsls	r4, r2, #3
 8004550:	4622      	mov	r2, r4
 8004552:	462b      	mov	r3, r5
 8004554:	1814      	adds	r4, r2, r0
 8004556:	653c      	str	r4, [r7, #80]	; 0x50
 8004558:	414b      	adcs	r3, r1
 800455a:	657b      	str	r3, [r7, #84]	; 0x54
 800455c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	461a      	mov	r2, r3
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	1891      	adds	r1, r2, r2
 8004568:	61b9      	str	r1, [r7, #24]
 800456a:	415b      	adcs	r3, r3
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004572:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004576:	f7fc fad9 	bl	8000b2c <__aeabi_uldivmod>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4b6c      	ldr	r3, [pc, #432]	; (8004730 <UART_SetConfig+0x38c>)
 8004580:	fba3 1302 	umull	r1, r3, r3, r2
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	2164      	movs	r1, #100	; 0x64
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	3332      	adds	r3, #50	; 0x32
 8004592:	4a67      	ldr	r2, [pc, #412]	; (8004730 <UART_SetConfig+0x38c>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	f003 0207 	and.w	r2, r3, #7
 800459e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4432      	add	r2, r6
 80045a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045a6:	e0b9      	b.n	800471c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045aa:	461c      	mov	r4, r3
 80045ac:	f04f 0500 	mov.w	r5, #0
 80045b0:	4622      	mov	r2, r4
 80045b2:	462b      	mov	r3, r5
 80045b4:	1891      	adds	r1, r2, r2
 80045b6:	6139      	str	r1, [r7, #16]
 80045b8:	415b      	adcs	r3, r3
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045c0:	1912      	adds	r2, r2, r4
 80045c2:	eb45 0303 	adc.w	r3, r5, r3
 80045c6:	f04f 0000 	mov.w	r0, #0
 80045ca:	f04f 0100 	mov.w	r1, #0
 80045ce:	00d9      	lsls	r1, r3, #3
 80045d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045d4:	00d0      	lsls	r0, r2, #3
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	eb12 0804 	adds.w	r8, r2, r4
 80045de:	eb43 0905 	adc.w	r9, r3, r5
 80045e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f04f 0100 	mov.w	r1, #0
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	008b      	lsls	r3, r1, #2
 80045f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045fa:	0082      	lsls	r2, r0, #2
 80045fc:	4640      	mov	r0, r8
 80045fe:	4649      	mov	r1, r9
 8004600:	f7fc fa94 	bl	8000b2c <__aeabi_uldivmod>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4b49      	ldr	r3, [pc, #292]	; (8004730 <UART_SetConfig+0x38c>)
 800460a:	fba3 2302 	umull	r2, r3, r3, r2
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	011e      	lsls	r6, r3, #4
 8004612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004614:	4618      	mov	r0, r3
 8004616:	f04f 0100 	mov.w	r1, #0
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	1894      	adds	r4, r2, r2
 8004620:	60bc      	str	r4, [r7, #8]
 8004622:	415b      	adcs	r3, r3
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800462a:	1812      	adds	r2, r2, r0
 800462c:	eb41 0303 	adc.w	r3, r1, r3
 8004630:	f04f 0400 	mov.w	r4, #0
 8004634:	f04f 0500 	mov.w	r5, #0
 8004638:	00dd      	lsls	r5, r3, #3
 800463a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800463e:	00d4      	lsls	r4, r2, #3
 8004640:	4622      	mov	r2, r4
 8004642:	462b      	mov	r3, r5
 8004644:	1814      	adds	r4, r2, r0
 8004646:	64bc      	str	r4, [r7, #72]	; 0x48
 8004648:	414b      	adcs	r3, r1
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800464c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4618      	mov	r0, r3
 8004652:	f04f 0100 	mov.w	r1, #0
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	008b      	lsls	r3, r1, #2
 8004660:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004664:	0082      	lsls	r2, r0, #2
 8004666:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800466a:	f7fc fa5f 	bl	8000b2c <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4b2f      	ldr	r3, [pc, #188]	; (8004730 <UART_SetConfig+0x38c>)
 8004674:	fba3 1302 	umull	r1, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2164      	movs	r1, #100	; 0x64
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a2a      	ldr	r2, [pc, #168]	; (8004730 <UART_SetConfig+0x38c>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004692:	441e      	add	r6, r3
 8004694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004696:	4618      	mov	r0, r3
 8004698:	f04f 0100 	mov.w	r1, #0
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	1894      	adds	r4, r2, r2
 80046a2:	603c      	str	r4, [r7, #0]
 80046a4:	415b      	adcs	r3, r3
 80046a6:	607b      	str	r3, [r7, #4]
 80046a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ac:	1812      	adds	r2, r2, r0
 80046ae:	eb41 0303 	adc.w	r3, r1, r3
 80046b2:	f04f 0400 	mov.w	r4, #0
 80046b6:	f04f 0500 	mov.w	r5, #0
 80046ba:	00dd      	lsls	r5, r3, #3
 80046bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046c0:	00d4      	lsls	r4, r2, #3
 80046c2:	4622      	mov	r2, r4
 80046c4:	462b      	mov	r3, r5
 80046c6:	eb12 0a00 	adds.w	sl, r2, r0
 80046ca:	eb43 0b01 	adc.w	fp, r3, r1
 80046ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f04f 0100 	mov.w	r1, #0
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	008b      	lsls	r3, r1, #2
 80046e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046e6:	0082      	lsls	r2, r0, #2
 80046e8:	4650      	mov	r0, sl
 80046ea:	4659      	mov	r1, fp
 80046ec:	f7fc fa1e 	bl	8000b2c <__aeabi_uldivmod>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <UART_SetConfig+0x38c>)
 80046f6:	fba3 1302 	umull	r1, r3, r3, r2
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	2164      	movs	r1, #100	; 0x64
 80046fe:	fb01 f303 	mul.w	r3, r1, r3
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	3332      	adds	r3, #50	; 0x32
 8004708:	4a09      	ldr	r2, [pc, #36]	; (8004730 <UART_SetConfig+0x38c>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	f003 020f 	and.w	r2, r3, #15
 8004714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4432      	add	r2, r6
 800471a:	609a      	str	r2, [r3, #8]
}
 800471c:	bf00      	nop
 800471e:	377c      	adds	r7, #124	; 0x7c
 8004720:	46bd      	mov	sp, r7
 8004722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004726:	bf00      	nop
 8004728:	40011000 	.word	0x40011000
 800472c:	40011400 	.word	0x40011400
 8004730:	51eb851f 	.word	0x51eb851f
 8004734:	00000000 	.word	0x00000000

08004738 <sin>:
 8004738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800473a:	ec53 2b10 	vmov	r2, r3, d0
 800473e:	4826      	ldr	r0, [pc, #152]	; (80047d8 <sin+0xa0>)
 8004740:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004744:	4281      	cmp	r1, r0
 8004746:	dc07      	bgt.n	8004758 <sin+0x20>
 8004748:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80047d0 <sin+0x98>
 800474c:	2000      	movs	r0, #0
 800474e:	f000 fe5b 	bl	8005408 <__kernel_sin>
 8004752:	ec51 0b10 	vmov	r0, r1, d0
 8004756:	e007      	b.n	8004768 <sin+0x30>
 8004758:	4820      	ldr	r0, [pc, #128]	; (80047dc <sin+0xa4>)
 800475a:	4281      	cmp	r1, r0
 800475c:	dd09      	ble.n	8004772 <sin+0x3a>
 800475e:	ee10 0a10 	vmov	r0, s0
 8004762:	4619      	mov	r1, r3
 8004764:	f7fb fd48 	bl	80001f8 <__aeabi_dsub>
 8004768:	ec41 0b10 	vmov	d0, r0, r1
 800476c:	b005      	add	sp, #20
 800476e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004772:	4668      	mov	r0, sp
 8004774:	f000 f834 	bl	80047e0 <__ieee754_rem_pio2>
 8004778:	f000 0003 	and.w	r0, r0, #3
 800477c:	2801      	cmp	r0, #1
 800477e:	d008      	beq.n	8004792 <sin+0x5a>
 8004780:	2802      	cmp	r0, #2
 8004782:	d00d      	beq.n	80047a0 <sin+0x68>
 8004784:	b9d0      	cbnz	r0, 80047bc <sin+0x84>
 8004786:	ed9d 1b02 	vldr	d1, [sp, #8]
 800478a:	ed9d 0b00 	vldr	d0, [sp]
 800478e:	2001      	movs	r0, #1
 8004790:	e7dd      	b.n	800474e <sin+0x16>
 8004792:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004796:	ed9d 0b00 	vldr	d0, [sp]
 800479a:	f000 fa2d 	bl	8004bf8 <__kernel_cos>
 800479e:	e7d8      	b.n	8004752 <sin+0x1a>
 80047a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80047a4:	ed9d 0b00 	vldr	d0, [sp]
 80047a8:	2001      	movs	r0, #1
 80047aa:	f000 fe2d 	bl	8005408 <__kernel_sin>
 80047ae:	ec53 2b10 	vmov	r2, r3, d0
 80047b2:	ee10 0a10 	vmov	r0, s0
 80047b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80047ba:	e7d5      	b.n	8004768 <sin+0x30>
 80047bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80047c0:	ed9d 0b00 	vldr	d0, [sp]
 80047c4:	f000 fa18 	bl	8004bf8 <__kernel_cos>
 80047c8:	e7f1      	b.n	80047ae <sin+0x76>
 80047ca:	bf00      	nop
 80047cc:	f3af 8000 	nop.w
	...
 80047d8:	3fe921fb 	.word	0x3fe921fb
 80047dc:	7fefffff 	.word	0x7fefffff

080047e0 <__ieee754_rem_pio2>:
 80047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	ed2d 8b02 	vpush	{d8}
 80047e8:	ec55 4b10 	vmov	r4, r5, d0
 80047ec:	4bca      	ldr	r3, [pc, #808]	; (8004b18 <__ieee754_rem_pio2+0x338>)
 80047ee:	b08b      	sub	sp, #44	; 0x2c
 80047f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80047f4:	4598      	cmp	r8, r3
 80047f6:	4682      	mov	sl, r0
 80047f8:	9502      	str	r5, [sp, #8]
 80047fa:	dc08      	bgt.n	800480e <__ieee754_rem_pio2+0x2e>
 80047fc:	2200      	movs	r2, #0
 80047fe:	2300      	movs	r3, #0
 8004800:	ed80 0b00 	vstr	d0, [r0]
 8004804:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004808:	f04f 0b00 	mov.w	fp, #0
 800480c:	e028      	b.n	8004860 <__ieee754_rem_pio2+0x80>
 800480e:	4bc3      	ldr	r3, [pc, #780]	; (8004b1c <__ieee754_rem_pio2+0x33c>)
 8004810:	4598      	cmp	r8, r3
 8004812:	dc78      	bgt.n	8004906 <__ieee754_rem_pio2+0x126>
 8004814:	9b02      	ldr	r3, [sp, #8]
 8004816:	4ec2      	ldr	r6, [pc, #776]	; (8004b20 <__ieee754_rem_pio2+0x340>)
 8004818:	2b00      	cmp	r3, #0
 800481a:	ee10 0a10 	vmov	r0, s0
 800481e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004ae0 <__ieee754_rem_pio2+0x300>)
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	4629      	mov	r1, r5
 8004826:	dd39      	ble.n	800489c <__ieee754_rem_pio2+0xbc>
 8004828:	f7fb fce6 	bl	80001f8 <__aeabi_dsub>
 800482c:	45b0      	cmp	r8, r6
 800482e:	4604      	mov	r4, r0
 8004830:	460d      	mov	r5, r1
 8004832:	d01b      	beq.n	800486c <__ieee754_rem_pio2+0x8c>
 8004834:	a3ac      	add	r3, pc, #688	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x308>)
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f7fb fcdd 	bl	80001f8 <__aeabi_dsub>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	e9ca 2300 	strd	r2, r3, [sl]
 8004846:	4620      	mov	r0, r4
 8004848:	4629      	mov	r1, r5
 800484a:	f7fb fcd5 	bl	80001f8 <__aeabi_dsub>
 800484e:	a3a6      	add	r3, pc, #664	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x308>)
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f7fb fcd0 	bl	80001f8 <__aeabi_dsub>
 8004858:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800485c:	f04f 0b01 	mov.w	fp, #1
 8004860:	4658      	mov	r0, fp
 8004862:	b00b      	add	sp, #44	; 0x2c
 8004864:	ecbd 8b02 	vpop	{d8}
 8004868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800486c:	a3a0      	add	r3, pc, #640	; (adr r3, 8004af0 <__ieee754_rem_pio2+0x310>)
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f7fb fcc1 	bl	80001f8 <__aeabi_dsub>
 8004876:	a3a0      	add	r3, pc, #640	; (adr r3, 8004af8 <__ieee754_rem_pio2+0x318>)
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	4604      	mov	r4, r0
 800487e:	460d      	mov	r5, r1
 8004880:	f7fb fcba 	bl	80001f8 <__aeabi_dsub>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	e9ca 2300 	strd	r2, r3, [sl]
 800488c:	4620      	mov	r0, r4
 800488e:	4629      	mov	r1, r5
 8004890:	f7fb fcb2 	bl	80001f8 <__aeabi_dsub>
 8004894:	a398      	add	r3, pc, #608	; (adr r3, 8004af8 <__ieee754_rem_pio2+0x318>)
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	e7db      	b.n	8004854 <__ieee754_rem_pio2+0x74>
 800489c:	f7fb fcae 	bl	80001fc <__adddf3>
 80048a0:	45b0      	cmp	r8, r6
 80048a2:	4604      	mov	r4, r0
 80048a4:	460d      	mov	r5, r1
 80048a6:	d016      	beq.n	80048d6 <__ieee754_rem_pio2+0xf6>
 80048a8:	a38f      	add	r3, pc, #572	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x308>)
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	f7fb fca5 	bl	80001fc <__adddf3>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	e9ca 2300 	strd	r2, r3, [sl]
 80048ba:	4620      	mov	r0, r4
 80048bc:	4629      	mov	r1, r5
 80048be:	f7fb fc9b 	bl	80001f8 <__aeabi_dsub>
 80048c2:	a389      	add	r3, pc, #548	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x308>)
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f7fb fc98 	bl	80001fc <__adddf3>
 80048cc:	f04f 3bff 	mov.w	fp, #4294967295
 80048d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80048d4:	e7c4      	b.n	8004860 <__ieee754_rem_pio2+0x80>
 80048d6:	a386      	add	r3, pc, #536	; (adr r3, 8004af0 <__ieee754_rem_pio2+0x310>)
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	f7fb fc8e 	bl	80001fc <__adddf3>
 80048e0:	a385      	add	r3, pc, #532	; (adr r3, 8004af8 <__ieee754_rem_pio2+0x318>)
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	4604      	mov	r4, r0
 80048e8:	460d      	mov	r5, r1
 80048ea:	f7fb fc87 	bl	80001fc <__adddf3>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	e9ca 2300 	strd	r2, r3, [sl]
 80048f6:	4620      	mov	r0, r4
 80048f8:	4629      	mov	r1, r5
 80048fa:	f7fb fc7d 	bl	80001f8 <__aeabi_dsub>
 80048fe:	a37e      	add	r3, pc, #504	; (adr r3, 8004af8 <__ieee754_rem_pio2+0x318>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	e7e0      	b.n	80048c8 <__ieee754_rem_pio2+0xe8>
 8004906:	4b87      	ldr	r3, [pc, #540]	; (8004b24 <__ieee754_rem_pio2+0x344>)
 8004908:	4598      	cmp	r8, r3
 800490a:	f300 80d9 	bgt.w	8004ac0 <__ieee754_rem_pio2+0x2e0>
 800490e:	f000 fe39 	bl	8005584 <fabs>
 8004912:	ec55 4b10 	vmov	r4, r5, d0
 8004916:	ee10 0a10 	vmov	r0, s0
 800491a:	a379      	add	r3, pc, #484	; (adr r3, 8004b00 <__ieee754_rem_pio2+0x320>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	4629      	mov	r1, r5
 8004922:	f7fb fe21 	bl	8000568 <__aeabi_dmul>
 8004926:	4b80      	ldr	r3, [pc, #512]	; (8004b28 <__ieee754_rem_pio2+0x348>)
 8004928:	2200      	movs	r2, #0
 800492a:	f7fb fc67 	bl	80001fc <__adddf3>
 800492e:	f7fc f8b5 	bl	8000a9c <__aeabi_d2iz>
 8004932:	4683      	mov	fp, r0
 8004934:	f7fb fdae 	bl	8000494 <__aeabi_i2d>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	ec43 2b18 	vmov	d8, r2, r3
 8004940:	a367      	add	r3, pc, #412	; (adr r3, 8004ae0 <__ieee754_rem_pio2+0x300>)
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f7fb fe0f 	bl	8000568 <__aeabi_dmul>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4620      	mov	r0, r4
 8004950:	4629      	mov	r1, r5
 8004952:	f7fb fc51 	bl	80001f8 <__aeabi_dsub>
 8004956:	a364      	add	r3, pc, #400	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x308>)
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	4606      	mov	r6, r0
 800495e:	460f      	mov	r7, r1
 8004960:	ec51 0b18 	vmov	r0, r1, d8
 8004964:	f7fb fe00 	bl	8000568 <__aeabi_dmul>
 8004968:	f1bb 0f1f 	cmp.w	fp, #31
 800496c:	4604      	mov	r4, r0
 800496e:	460d      	mov	r5, r1
 8004970:	dc0d      	bgt.n	800498e <__ieee754_rem_pio2+0x1ae>
 8004972:	4b6e      	ldr	r3, [pc, #440]	; (8004b2c <__ieee754_rem_pio2+0x34c>)
 8004974:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497c:	4543      	cmp	r3, r8
 800497e:	d006      	beq.n	800498e <__ieee754_rem_pio2+0x1ae>
 8004980:	4622      	mov	r2, r4
 8004982:	462b      	mov	r3, r5
 8004984:	4630      	mov	r0, r6
 8004986:	4639      	mov	r1, r7
 8004988:	f7fb fc36 	bl	80001f8 <__aeabi_dsub>
 800498c:	e00f      	b.n	80049ae <__ieee754_rem_pio2+0x1ce>
 800498e:	462b      	mov	r3, r5
 8004990:	4622      	mov	r2, r4
 8004992:	4630      	mov	r0, r6
 8004994:	4639      	mov	r1, r7
 8004996:	f7fb fc2f 	bl	80001f8 <__aeabi_dsub>
 800499a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800499e:	9303      	str	r3, [sp, #12]
 80049a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80049a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80049a8:	f1b8 0f10 	cmp.w	r8, #16
 80049ac:	dc02      	bgt.n	80049b4 <__ieee754_rem_pio2+0x1d4>
 80049ae:	e9ca 0100 	strd	r0, r1, [sl]
 80049b2:	e039      	b.n	8004a28 <__ieee754_rem_pio2+0x248>
 80049b4:	a34e      	add	r3, pc, #312	; (adr r3, 8004af0 <__ieee754_rem_pio2+0x310>)
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	ec51 0b18 	vmov	r0, r1, d8
 80049be:	f7fb fdd3 	bl	8000568 <__aeabi_dmul>
 80049c2:	4604      	mov	r4, r0
 80049c4:	460d      	mov	r5, r1
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4630      	mov	r0, r6
 80049cc:	4639      	mov	r1, r7
 80049ce:	f7fb fc13 	bl	80001f8 <__aeabi_dsub>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4680      	mov	r8, r0
 80049d8:	4689      	mov	r9, r1
 80049da:	4630      	mov	r0, r6
 80049dc:	4639      	mov	r1, r7
 80049de:	f7fb fc0b 	bl	80001f8 <__aeabi_dsub>
 80049e2:	4622      	mov	r2, r4
 80049e4:	462b      	mov	r3, r5
 80049e6:	f7fb fc07 	bl	80001f8 <__aeabi_dsub>
 80049ea:	a343      	add	r3, pc, #268	; (adr r3, 8004af8 <__ieee754_rem_pio2+0x318>)
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	4604      	mov	r4, r0
 80049f2:	460d      	mov	r5, r1
 80049f4:	ec51 0b18 	vmov	r0, r1, d8
 80049f8:	f7fb fdb6 	bl	8000568 <__aeabi_dmul>
 80049fc:	4622      	mov	r2, r4
 80049fe:	462b      	mov	r3, r5
 8004a00:	f7fb fbfa 	bl	80001f8 <__aeabi_dsub>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4604      	mov	r4, r0
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	4649      	mov	r1, r9
 8004a10:	f7fb fbf2 	bl	80001f8 <__aeabi_dsub>
 8004a14:	9a03      	ldr	r2, [sp, #12]
 8004a16:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b31      	cmp	r3, #49	; 0x31
 8004a1e:	dc24      	bgt.n	8004a6a <__ieee754_rem_pio2+0x28a>
 8004a20:	e9ca 0100 	strd	r0, r1, [sl]
 8004a24:	4646      	mov	r6, r8
 8004a26:	464f      	mov	r7, r9
 8004a28:	e9da 8900 	ldrd	r8, r9, [sl]
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	4642      	mov	r2, r8
 8004a30:	464b      	mov	r3, r9
 8004a32:	4639      	mov	r1, r7
 8004a34:	f7fb fbe0 	bl	80001f8 <__aeabi_dsub>
 8004a38:	462b      	mov	r3, r5
 8004a3a:	4622      	mov	r2, r4
 8004a3c:	f7fb fbdc 	bl	80001f8 <__aeabi_dsub>
 8004a40:	9b02      	ldr	r3, [sp, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004a48:	f6bf af0a 	bge.w	8004860 <__ieee754_rem_pio2+0x80>
 8004a4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004a50:	f8ca 3004 	str.w	r3, [sl, #4]
 8004a54:	f8ca 8000 	str.w	r8, [sl]
 8004a58:	f8ca 0008 	str.w	r0, [sl, #8]
 8004a5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a60:	f8ca 300c 	str.w	r3, [sl, #12]
 8004a64:	f1cb 0b00 	rsb	fp, fp, #0
 8004a68:	e6fa      	b.n	8004860 <__ieee754_rem_pio2+0x80>
 8004a6a:	a327      	add	r3, pc, #156	; (adr r3, 8004b08 <__ieee754_rem_pio2+0x328>)
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	ec51 0b18 	vmov	r0, r1, d8
 8004a74:	f7fb fd78 	bl	8000568 <__aeabi_dmul>
 8004a78:	4604      	mov	r4, r0
 8004a7a:	460d      	mov	r5, r1
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4640      	mov	r0, r8
 8004a82:	4649      	mov	r1, r9
 8004a84:	f7fb fbb8 	bl	80001f8 <__aeabi_dsub>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4606      	mov	r6, r0
 8004a8e:	460f      	mov	r7, r1
 8004a90:	4640      	mov	r0, r8
 8004a92:	4649      	mov	r1, r9
 8004a94:	f7fb fbb0 	bl	80001f8 <__aeabi_dsub>
 8004a98:	4622      	mov	r2, r4
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	f7fb fbac 	bl	80001f8 <__aeabi_dsub>
 8004aa0:	a31b      	add	r3, pc, #108	; (adr r3, 8004b10 <__ieee754_rem_pio2+0x330>)
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	460d      	mov	r5, r1
 8004aaa:	ec51 0b18 	vmov	r0, r1, d8
 8004aae:	f7fb fd5b 	bl	8000568 <__aeabi_dmul>
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	f7fb fb9f 	bl	80001f8 <__aeabi_dsub>
 8004aba:	4604      	mov	r4, r0
 8004abc:	460d      	mov	r5, r1
 8004abe:	e75f      	b.n	8004980 <__ieee754_rem_pio2+0x1a0>
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <__ieee754_rem_pio2+0x350>)
 8004ac2:	4598      	cmp	r8, r3
 8004ac4:	dd36      	ble.n	8004b34 <__ieee754_rem_pio2+0x354>
 8004ac6:	ee10 2a10 	vmov	r2, s0
 8004aca:	462b      	mov	r3, r5
 8004acc:	4620      	mov	r0, r4
 8004ace:	4629      	mov	r1, r5
 8004ad0:	f7fb fb92 	bl	80001f8 <__aeabi_dsub>
 8004ad4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004ad8:	e9ca 0100 	strd	r0, r1, [sl]
 8004adc:	e694      	b.n	8004808 <__ieee754_rem_pio2+0x28>
 8004ade:	bf00      	nop
 8004ae0:	54400000 	.word	0x54400000
 8004ae4:	3ff921fb 	.word	0x3ff921fb
 8004ae8:	1a626331 	.word	0x1a626331
 8004aec:	3dd0b461 	.word	0x3dd0b461
 8004af0:	1a600000 	.word	0x1a600000
 8004af4:	3dd0b461 	.word	0x3dd0b461
 8004af8:	2e037073 	.word	0x2e037073
 8004afc:	3ba3198a 	.word	0x3ba3198a
 8004b00:	6dc9c883 	.word	0x6dc9c883
 8004b04:	3fe45f30 	.word	0x3fe45f30
 8004b08:	2e000000 	.word	0x2e000000
 8004b0c:	3ba3198a 	.word	0x3ba3198a
 8004b10:	252049c1 	.word	0x252049c1
 8004b14:	397b839a 	.word	0x397b839a
 8004b18:	3fe921fb 	.word	0x3fe921fb
 8004b1c:	4002d97b 	.word	0x4002d97b
 8004b20:	3ff921fb 	.word	0x3ff921fb
 8004b24:	413921fb 	.word	0x413921fb
 8004b28:	3fe00000 	.word	0x3fe00000
 8004b2c:	08005a54 	.word	0x08005a54
 8004b30:	7fefffff 	.word	0x7fefffff
 8004b34:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004b38:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004b3c:	ee10 0a10 	vmov	r0, s0
 8004b40:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004b44:	ee10 6a10 	vmov	r6, s0
 8004b48:	460f      	mov	r7, r1
 8004b4a:	f7fb ffa7 	bl	8000a9c <__aeabi_d2iz>
 8004b4e:	f7fb fca1 	bl	8000494 <__aeabi_i2d>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4630      	mov	r0, r6
 8004b58:	4639      	mov	r1, r7
 8004b5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b5e:	f7fb fb4b 	bl	80001f8 <__aeabi_dsub>
 8004b62:	4b22      	ldr	r3, [pc, #136]	; (8004bec <__ieee754_rem_pio2+0x40c>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	f7fb fcff 	bl	8000568 <__aeabi_dmul>
 8004b6a:	460f      	mov	r7, r1
 8004b6c:	4606      	mov	r6, r0
 8004b6e:	f7fb ff95 	bl	8000a9c <__aeabi_d2iz>
 8004b72:	f7fb fc8f 	bl	8000494 <__aeabi_i2d>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	4639      	mov	r1, r7
 8004b7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b82:	f7fb fb39 	bl	80001f8 <__aeabi_dsub>
 8004b86:	4b19      	ldr	r3, [pc, #100]	; (8004bec <__ieee754_rem_pio2+0x40c>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f7fb fced 	bl	8000568 <__aeabi_dmul>
 8004b8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004b92:	ad04      	add	r5, sp, #16
 8004b94:	f04f 0803 	mov.w	r8, #3
 8004b98:	46a9      	mov	r9, r5
 8004b9a:	2600      	movs	r6, #0
 8004b9c:	2700      	movs	r7, #0
 8004b9e:	4632      	mov	r2, r6
 8004ba0:	463b      	mov	r3, r7
 8004ba2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004ba6:	46c3      	mov	fp, r8
 8004ba8:	3d08      	subs	r5, #8
 8004baa:	f108 38ff 	add.w	r8, r8, #4294967295
 8004bae:	f7fb ff43 	bl	8000a38 <__aeabi_dcmpeq>
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	d1f3      	bne.n	8004b9e <__ieee754_rem_pio2+0x3be>
 8004bb6:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <__ieee754_rem_pio2+0x410>)
 8004bb8:	9301      	str	r3, [sp, #4]
 8004bba:	2302      	movs	r3, #2
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	4622      	mov	r2, r4
 8004bc0:	465b      	mov	r3, fp
 8004bc2:	4651      	mov	r1, sl
 8004bc4:	4648      	mov	r0, r9
 8004bc6:	f000 f8df 	bl	8004d88 <__kernel_rem_pio2>
 8004bca:	9b02      	ldr	r3, [sp, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	4683      	mov	fp, r0
 8004bd0:	f6bf ae46 	bge.w	8004860 <__ieee754_rem_pio2+0x80>
 8004bd4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004bd8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004bdc:	f8ca 3004 	str.w	r3, [sl, #4]
 8004be0:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004be4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004be8:	e73a      	b.n	8004a60 <__ieee754_rem_pio2+0x280>
 8004bea:	bf00      	nop
 8004bec:	41700000 	.word	0x41700000
 8004bf0:	08005ad4 	.word	0x08005ad4
 8004bf4:	00000000 	.word	0x00000000

08004bf8 <__kernel_cos>:
 8004bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfc:	ec57 6b10 	vmov	r6, r7, d0
 8004c00:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004c04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004c08:	ed8d 1b00 	vstr	d1, [sp]
 8004c0c:	da07      	bge.n	8004c1e <__kernel_cos+0x26>
 8004c0e:	ee10 0a10 	vmov	r0, s0
 8004c12:	4639      	mov	r1, r7
 8004c14:	f7fb ff42 	bl	8000a9c <__aeabi_d2iz>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	f000 8088 	beq.w	8004d2e <__kernel_cos+0x136>
 8004c1e:	4632      	mov	r2, r6
 8004c20:	463b      	mov	r3, r7
 8004c22:	4630      	mov	r0, r6
 8004c24:	4639      	mov	r1, r7
 8004c26:	f7fb fc9f 	bl	8000568 <__aeabi_dmul>
 8004c2a:	4b51      	ldr	r3, [pc, #324]	; (8004d70 <__kernel_cos+0x178>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	4604      	mov	r4, r0
 8004c30:	460d      	mov	r5, r1
 8004c32:	f7fb fc99 	bl	8000568 <__aeabi_dmul>
 8004c36:	a340      	add	r3, pc, #256	; (adr r3, 8004d38 <__kernel_cos+0x140>)
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	4682      	mov	sl, r0
 8004c3e:	468b      	mov	fp, r1
 8004c40:	4620      	mov	r0, r4
 8004c42:	4629      	mov	r1, r5
 8004c44:	f7fb fc90 	bl	8000568 <__aeabi_dmul>
 8004c48:	a33d      	add	r3, pc, #244	; (adr r3, 8004d40 <__kernel_cos+0x148>)
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f7fb fad5 	bl	80001fc <__adddf3>
 8004c52:	4622      	mov	r2, r4
 8004c54:	462b      	mov	r3, r5
 8004c56:	f7fb fc87 	bl	8000568 <__aeabi_dmul>
 8004c5a:	a33b      	add	r3, pc, #236	; (adr r3, 8004d48 <__kernel_cos+0x150>)
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f7fb faca 	bl	80001f8 <__aeabi_dsub>
 8004c64:	4622      	mov	r2, r4
 8004c66:	462b      	mov	r3, r5
 8004c68:	f7fb fc7e 	bl	8000568 <__aeabi_dmul>
 8004c6c:	a338      	add	r3, pc, #224	; (adr r3, 8004d50 <__kernel_cos+0x158>)
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	f7fb fac3 	bl	80001fc <__adddf3>
 8004c76:	4622      	mov	r2, r4
 8004c78:	462b      	mov	r3, r5
 8004c7a:	f7fb fc75 	bl	8000568 <__aeabi_dmul>
 8004c7e:	a336      	add	r3, pc, #216	; (adr r3, 8004d58 <__kernel_cos+0x160>)
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f7fb fab8 	bl	80001f8 <__aeabi_dsub>
 8004c88:	4622      	mov	r2, r4
 8004c8a:	462b      	mov	r3, r5
 8004c8c:	f7fb fc6c 	bl	8000568 <__aeabi_dmul>
 8004c90:	a333      	add	r3, pc, #204	; (adr r3, 8004d60 <__kernel_cos+0x168>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f7fb fab1 	bl	80001fc <__adddf3>
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	462b      	mov	r3, r5
 8004c9e:	f7fb fc63 	bl	8000568 <__aeabi_dmul>
 8004ca2:	4622      	mov	r2, r4
 8004ca4:	462b      	mov	r3, r5
 8004ca6:	f7fb fc5f 	bl	8000568 <__aeabi_dmul>
 8004caa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cae:	4604      	mov	r4, r0
 8004cb0:	460d      	mov	r5, r1
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	4639      	mov	r1, r7
 8004cb6:	f7fb fc57 	bl	8000568 <__aeabi_dmul>
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f7fb fa99 	bl	80001f8 <__aeabi_dsub>
 8004cc6:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <__kernel_cos+0x17c>)
 8004cc8:	4598      	cmp	r8, r3
 8004cca:	4606      	mov	r6, r0
 8004ccc:	460f      	mov	r7, r1
 8004cce:	dc10      	bgt.n	8004cf2 <__kernel_cos+0xfa>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4650      	mov	r0, sl
 8004cd6:	4659      	mov	r1, fp
 8004cd8:	f7fb fa8e 	bl	80001f8 <__aeabi_dsub>
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4926      	ldr	r1, [pc, #152]	; (8004d78 <__kernel_cos+0x180>)
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	f7fb fa88 	bl	80001f8 <__aeabi_dsub>
 8004ce8:	ec41 0b10 	vmov	d0, r0, r1
 8004cec:	b003      	add	sp, #12
 8004cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf2:	4b22      	ldr	r3, [pc, #136]	; (8004d7c <__kernel_cos+0x184>)
 8004cf4:	4920      	ldr	r1, [pc, #128]	; (8004d78 <__kernel_cos+0x180>)
 8004cf6:	4598      	cmp	r8, r3
 8004cf8:	bfcc      	ite	gt
 8004cfa:	4d21      	ldrgt	r5, [pc, #132]	; (8004d80 <__kernel_cos+0x188>)
 8004cfc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004d00:	2400      	movs	r4, #0
 8004d02:	4622      	mov	r2, r4
 8004d04:	462b      	mov	r3, r5
 8004d06:	2000      	movs	r0, #0
 8004d08:	f7fb fa76 	bl	80001f8 <__aeabi_dsub>
 8004d0c:	4622      	mov	r2, r4
 8004d0e:	4680      	mov	r8, r0
 8004d10:	4689      	mov	r9, r1
 8004d12:	462b      	mov	r3, r5
 8004d14:	4650      	mov	r0, sl
 8004d16:	4659      	mov	r1, fp
 8004d18:	f7fb fa6e 	bl	80001f8 <__aeabi_dsub>
 8004d1c:	4632      	mov	r2, r6
 8004d1e:	463b      	mov	r3, r7
 8004d20:	f7fb fa6a 	bl	80001f8 <__aeabi_dsub>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4640      	mov	r0, r8
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	e7da      	b.n	8004ce4 <__kernel_cos+0xec>
 8004d2e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004d68 <__kernel_cos+0x170>
 8004d32:	e7db      	b.n	8004cec <__kernel_cos+0xf4>
 8004d34:	f3af 8000 	nop.w
 8004d38:	be8838d4 	.word	0xbe8838d4
 8004d3c:	bda8fae9 	.word	0xbda8fae9
 8004d40:	bdb4b1c4 	.word	0xbdb4b1c4
 8004d44:	3e21ee9e 	.word	0x3e21ee9e
 8004d48:	809c52ad 	.word	0x809c52ad
 8004d4c:	3e927e4f 	.word	0x3e927e4f
 8004d50:	19cb1590 	.word	0x19cb1590
 8004d54:	3efa01a0 	.word	0x3efa01a0
 8004d58:	16c15177 	.word	0x16c15177
 8004d5c:	3f56c16c 	.word	0x3f56c16c
 8004d60:	5555554c 	.word	0x5555554c
 8004d64:	3fa55555 	.word	0x3fa55555
 8004d68:	00000000 	.word	0x00000000
 8004d6c:	3ff00000 	.word	0x3ff00000
 8004d70:	3fe00000 	.word	0x3fe00000
 8004d74:	3fd33332 	.word	0x3fd33332
 8004d78:	3ff00000 	.word	0x3ff00000
 8004d7c:	3fe90000 	.word	0x3fe90000
 8004d80:	3fd20000 	.word	0x3fd20000
 8004d84:	00000000 	.word	0x00000000

08004d88 <__kernel_rem_pio2>:
 8004d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	ed2d 8b02 	vpush	{d8}
 8004d90:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004d94:	f112 0f14 	cmn.w	r2, #20
 8004d98:	9308      	str	r3, [sp, #32]
 8004d9a:	9101      	str	r1, [sp, #4]
 8004d9c:	4bc6      	ldr	r3, [pc, #792]	; (80050b8 <__kernel_rem_pio2+0x330>)
 8004d9e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004da0:	9009      	str	r0, [sp, #36]	; 0x24
 8004da2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004da6:	9304      	str	r3, [sp, #16]
 8004da8:	9b08      	ldr	r3, [sp, #32]
 8004daa:	f103 33ff 	add.w	r3, r3, #4294967295
 8004dae:	bfa8      	it	ge
 8004db0:	1ed4      	subge	r4, r2, #3
 8004db2:	9306      	str	r3, [sp, #24]
 8004db4:	bfb2      	itee	lt
 8004db6:	2400      	movlt	r4, #0
 8004db8:	2318      	movge	r3, #24
 8004dba:	fb94 f4f3 	sdivge	r4, r4, r3
 8004dbe:	f06f 0317 	mvn.w	r3, #23
 8004dc2:	fb04 3303 	mla	r3, r4, r3, r3
 8004dc6:	eb03 0a02 	add.w	sl, r3, r2
 8004dca:	9b04      	ldr	r3, [sp, #16]
 8004dcc:	9a06      	ldr	r2, [sp, #24]
 8004dce:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80050a8 <__kernel_rem_pio2+0x320>
 8004dd2:	eb03 0802 	add.w	r8, r3, r2
 8004dd6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004dd8:	1aa7      	subs	r7, r4, r2
 8004dda:	ae20      	add	r6, sp, #128	; 0x80
 8004ddc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004de0:	2500      	movs	r5, #0
 8004de2:	4545      	cmp	r5, r8
 8004de4:	dd18      	ble.n	8004e18 <__kernel_rem_pio2+0x90>
 8004de6:	9b08      	ldr	r3, [sp, #32]
 8004de8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004dec:	aa20      	add	r2, sp, #128	; 0x80
 8004dee:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80050a8 <__kernel_rem_pio2+0x320>
 8004df2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004df6:	f1c3 0301 	rsb	r3, r3, #1
 8004dfa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004dfe:	9307      	str	r3, [sp, #28]
 8004e00:	9b07      	ldr	r3, [sp, #28]
 8004e02:	9a04      	ldr	r2, [sp, #16]
 8004e04:	4443      	add	r3, r8
 8004e06:	429a      	cmp	r2, r3
 8004e08:	db2f      	blt.n	8004e6a <__kernel_rem_pio2+0xe2>
 8004e0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004e0e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004e12:	462f      	mov	r7, r5
 8004e14:	2600      	movs	r6, #0
 8004e16:	e01b      	b.n	8004e50 <__kernel_rem_pio2+0xc8>
 8004e18:	42ef      	cmn	r7, r5
 8004e1a:	d407      	bmi.n	8004e2c <__kernel_rem_pio2+0xa4>
 8004e1c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004e20:	f7fb fb38 	bl	8000494 <__aeabi_i2d>
 8004e24:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004e28:	3501      	adds	r5, #1
 8004e2a:	e7da      	b.n	8004de2 <__kernel_rem_pio2+0x5a>
 8004e2c:	ec51 0b18 	vmov	r0, r1, d8
 8004e30:	e7f8      	b.n	8004e24 <__kernel_rem_pio2+0x9c>
 8004e32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e36:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004e3a:	f7fb fb95 	bl	8000568 <__aeabi_dmul>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e46:	f7fb f9d9 	bl	80001fc <__adddf3>
 8004e4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e4e:	3601      	adds	r6, #1
 8004e50:	9b06      	ldr	r3, [sp, #24]
 8004e52:	429e      	cmp	r6, r3
 8004e54:	f1a7 0708 	sub.w	r7, r7, #8
 8004e58:	ddeb      	ble.n	8004e32 <__kernel_rem_pio2+0xaa>
 8004e5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e5e:	3508      	adds	r5, #8
 8004e60:	ecab 7b02 	vstmia	fp!, {d7}
 8004e64:	f108 0801 	add.w	r8, r8, #1
 8004e68:	e7ca      	b.n	8004e00 <__kernel_rem_pio2+0x78>
 8004e6a:	9b04      	ldr	r3, [sp, #16]
 8004e6c:	aa0c      	add	r2, sp, #48	; 0x30
 8004e6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e74:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004e76:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004e7a:	9c04      	ldr	r4, [sp, #16]
 8004e7c:	930a      	str	r3, [sp, #40]	; 0x28
 8004e7e:	ab98      	add	r3, sp, #608	; 0x260
 8004e80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e84:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004e88:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004e8c:	f8cd b008 	str.w	fp, [sp, #8]
 8004e90:	4625      	mov	r5, r4
 8004e92:	2d00      	cmp	r5, #0
 8004e94:	dc78      	bgt.n	8004f88 <__kernel_rem_pio2+0x200>
 8004e96:	ec47 6b10 	vmov	d0, r6, r7
 8004e9a:	4650      	mov	r0, sl
 8004e9c:	f000 fbfc 	bl	8005698 <scalbn>
 8004ea0:	ec57 6b10 	vmov	r6, r7, d0
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004eaa:	ee10 0a10 	vmov	r0, s0
 8004eae:	4639      	mov	r1, r7
 8004eb0:	f7fb fb5a 	bl	8000568 <__aeabi_dmul>
 8004eb4:	ec41 0b10 	vmov	d0, r0, r1
 8004eb8:	f000 fb6e 	bl	8005598 <floor>
 8004ebc:	4b7f      	ldr	r3, [pc, #508]	; (80050bc <__kernel_rem_pio2+0x334>)
 8004ebe:	ec51 0b10 	vmov	r0, r1, d0
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f7fb fb50 	bl	8000568 <__aeabi_dmul>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4630      	mov	r0, r6
 8004ece:	4639      	mov	r1, r7
 8004ed0:	f7fb f992 	bl	80001f8 <__aeabi_dsub>
 8004ed4:	460f      	mov	r7, r1
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	f7fb fde0 	bl	8000a9c <__aeabi_d2iz>
 8004edc:	9007      	str	r0, [sp, #28]
 8004ede:	f7fb fad9 	bl	8000494 <__aeabi_i2d>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	4639      	mov	r1, r7
 8004eea:	f7fb f985 	bl	80001f8 <__aeabi_dsub>
 8004eee:	f1ba 0f00 	cmp.w	sl, #0
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	460f      	mov	r7, r1
 8004ef6:	dd70      	ble.n	8004fda <__kernel_rem_pio2+0x252>
 8004ef8:	1e62      	subs	r2, r4, #1
 8004efa:	ab0c      	add	r3, sp, #48	; 0x30
 8004efc:	9d07      	ldr	r5, [sp, #28]
 8004efe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004f02:	f1ca 0118 	rsb	r1, sl, #24
 8004f06:	fa40 f301 	asr.w	r3, r0, r1
 8004f0a:	441d      	add	r5, r3
 8004f0c:	408b      	lsls	r3, r1
 8004f0e:	1ac0      	subs	r0, r0, r3
 8004f10:	ab0c      	add	r3, sp, #48	; 0x30
 8004f12:	9507      	str	r5, [sp, #28]
 8004f14:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004f18:	f1ca 0317 	rsb	r3, sl, #23
 8004f1c:	fa40 f303 	asr.w	r3, r0, r3
 8004f20:	9302      	str	r3, [sp, #8]
 8004f22:	9b02      	ldr	r3, [sp, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	dd66      	ble.n	8004ff6 <__kernel_rem_pio2+0x26e>
 8004f28:	9b07      	ldr	r3, [sp, #28]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	9307      	str	r3, [sp, #28]
 8004f30:	4615      	mov	r5, r2
 8004f32:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004f36:	4294      	cmp	r4, r2
 8004f38:	f300 8099 	bgt.w	800506e <__kernel_rem_pio2+0x2e6>
 8004f3c:	f1ba 0f00 	cmp.w	sl, #0
 8004f40:	dd07      	ble.n	8004f52 <__kernel_rem_pio2+0x1ca>
 8004f42:	f1ba 0f01 	cmp.w	sl, #1
 8004f46:	f000 80a5 	beq.w	8005094 <__kernel_rem_pio2+0x30c>
 8004f4a:	f1ba 0f02 	cmp.w	sl, #2
 8004f4e:	f000 80c1 	beq.w	80050d4 <__kernel_rem_pio2+0x34c>
 8004f52:	9b02      	ldr	r3, [sp, #8]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d14e      	bne.n	8004ff6 <__kernel_rem_pio2+0x26e>
 8004f58:	4632      	mov	r2, r6
 8004f5a:	463b      	mov	r3, r7
 8004f5c:	4958      	ldr	r1, [pc, #352]	; (80050c0 <__kernel_rem_pio2+0x338>)
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f7fb f94a 	bl	80001f8 <__aeabi_dsub>
 8004f64:	4606      	mov	r6, r0
 8004f66:	460f      	mov	r7, r1
 8004f68:	2d00      	cmp	r5, #0
 8004f6a:	d044      	beq.n	8004ff6 <__kernel_rem_pio2+0x26e>
 8004f6c:	4650      	mov	r0, sl
 8004f6e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80050b0 <__kernel_rem_pio2+0x328>
 8004f72:	f000 fb91 	bl	8005698 <scalbn>
 8004f76:	4630      	mov	r0, r6
 8004f78:	4639      	mov	r1, r7
 8004f7a:	ec53 2b10 	vmov	r2, r3, d0
 8004f7e:	f7fb f93b 	bl	80001f8 <__aeabi_dsub>
 8004f82:	4606      	mov	r6, r0
 8004f84:	460f      	mov	r7, r1
 8004f86:	e036      	b.n	8004ff6 <__kernel_rem_pio2+0x26e>
 8004f88:	4b4e      	ldr	r3, [pc, #312]	; (80050c4 <__kernel_rem_pio2+0x33c>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	4639      	mov	r1, r7
 8004f90:	f7fb faea 	bl	8000568 <__aeabi_dmul>
 8004f94:	f7fb fd82 	bl	8000a9c <__aeabi_d2iz>
 8004f98:	f7fb fa7c 	bl	8000494 <__aeabi_i2d>
 8004f9c:	4b4a      	ldr	r3, [pc, #296]	; (80050c8 <__kernel_rem_pio2+0x340>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	4680      	mov	r8, r0
 8004fa2:	4689      	mov	r9, r1
 8004fa4:	f7fb fae0 	bl	8000568 <__aeabi_dmul>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4630      	mov	r0, r6
 8004fae:	4639      	mov	r1, r7
 8004fb0:	f7fb f922 	bl	80001f8 <__aeabi_dsub>
 8004fb4:	f7fb fd72 	bl	8000a9c <__aeabi_d2iz>
 8004fb8:	9b02      	ldr	r3, [sp, #8]
 8004fba:	f843 0b04 	str.w	r0, [r3], #4
 8004fbe:	3d01      	subs	r5, #1
 8004fc0:	9302      	str	r3, [sp, #8]
 8004fc2:	ab70      	add	r3, sp, #448	; 0x1c0
 8004fc4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	4640      	mov	r0, r8
 8004fce:	4649      	mov	r1, r9
 8004fd0:	f7fb f914 	bl	80001fc <__adddf3>
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	460f      	mov	r7, r1
 8004fd8:	e75b      	b.n	8004e92 <__kernel_rem_pio2+0x10a>
 8004fda:	d105      	bne.n	8004fe8 <__kernel_rem_pio2+0x260>
 8004fdc:	1e63      	subs	r3, r4, #1
 8004fde:	aa0c      	add	r2, sp, #48	; 0x30
 8004fe0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004fe4:	15c3      	asrs	r3, r0, #23
 8004fe6:	e79b      	b.n	8004f20 <__kernel_rem_pio2+0x198>
 8004fe8:	4b38      	ldr	r3, [pc, #224]	; (80050cc <__kernel_rem_pio2+0x344>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	f7fb fd42 	bl	8000a74 <__aeabi_dcmpge>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d139      	bne.n	8005068 <__kernel_rem_pio2+0x2e0>
 8004ff4:	9002      	str	r0, [sp, #8]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	4639      	mov	r1, r7
 8004ffe:	f7fb fd1b 	bl	8000a38 <__aeabi_dcmpeq>
 8005002:	2800      	cmp	r0, #0
 8005004:	f000 80b4 	beq.w	8005170 <__kernel_rem_pio2+0x3e8>
 8005008:	f104 3bff 	add.w	fp, r4, #4294967295
 800500c:	465b      	mov	r3, fp
 800500e:	2200      	movs	r2, #0
 8005010:	9904      	ldr	r1, [sp, #16]
 8005012:	428b      	cmp	r3, r1
 8005014:	da65      	bge.n	80050e2 <__kernel_rem_pio2+0x35a>
 8005016:	2a00      	cmp	r2, #0
 8005018:	d07b      	beq.n	8005112 <__kernel_rem_pio2+0x38a>
 800501a:	ab0c      	add	r3, sp, #48	; 0x30
 800501c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005020:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80a0 	beq.w	800516a <__kernel_rem_pio2+0x3e2>
 800502a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80050b0 <__kernel_rem_pio2+0x328>
 800502e:	4650      	mov	r0, sl
 8005030:	f000 fb32 	bl	8005698 <scalbn>
 8005034:	4f23      	ldr	r7, [pc, #140]	; (80050c4 <__kernel_rem_pio2+0x33c>)
 8005036:	ec55 4b10 	vmov	r4, r5, d0
 800503a:	46d8      	mov	r8, fp
 800503c:	2600      	movs	r6, #0
 800503e:	f1b8 0f00 	cmp.w	r8, #0
 8005042:	f280 80cf 	bge.w	80051e4 <__kernel_rem_pio2+0x45c>
 8005046:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80050a8 <__kernel_rem_pio2+0x320>
 800504a:	465f      	mov	r7, fp
 800504c:	f04f 0800 	mov.w	r8, #0
 8005050:	2f00      	cmp	r7, #0
 8005052:	f2c0 80fd 	blt.w	8005250 <__kernel_rem_pio2+0x4c8>
 8005056:	ab70      	add	r3, sp, #448	; 0x1c0
 8005058:	f8df a074 	ldr.w	sl, [pc, #116]	; 80050d0 <__kernel_rem_pio2+0x348>
 800505c:	ec55 4b18 	vmov	r4, r5, d8
 8005060:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8005064:	2600      	movs	r6, #0
 8005066:	e0e5      	b.n	8005234 <__kernel_rem_pio2+0x4ac>
 8005068:	2302      	movs	r3, #2
 800506a:	9302      	str	r3, [sp, #8]
 800506c:	e75c      	b.n	8004f28 <__kernel_rem_pio2+0x1a0>
 800506e:	f8db 3000 	ldr.w	r3, [fp]
 8005072:	b955      	cbnz	r5, 800508a <__kernel_rem_pio2+0x302>
 8005074:	b123      	cbz	r3, 8005080 <__kernel_rem_pio2+0x2f8>
 8005076:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800507a:	f8cb 3000 	str.w	r3, [fp]
 800507e:	2301      	movs	r3, #1
 8005080:	3201      	adds	r2, #1
 8005082:	f10b 0b04 	add.w	fp, fp, #4
 8005086:	461d      	mov	r5, r3
 8005088:	e755      	b.n	8004f36 <__kernel_rem_pio2+0x1ae>
 800508a:	1acb      	subs	r3, r1, r3
 800508c:	f8cb 3000 	str.w	r3, [fp]
 8005090:	462b      	mov	r3, r5
 8005092:	e7f5      	b.n	8005080 <__kernel_rem_pio2+0x2f8>
 8005094:	1e62      	subs	r2, r4, #1
 8005096:	ab0c      	add	r3, sp, #48	; 0x30
 8005098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800509c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80050a0:	a90c      	add	r1, sp, #48	; 0x30
 80050a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80050a6:	e754      	b.n	8004f52 <__kernel_rem_pio2+0x1ca>
	...
 80050b4:	3ff00000 	.word	0x3ff00000
 80050b8:	08005c20 	.word	0x08005c20
 80050bc:	40200000 	.word	0x40200000
 80050c0:	3ff00000 	.word	0x3ff00000
 80050c4:	3e700000 	.word	0x3e700000
 80050c8:	41700000 	.word	0x41700000
 80050cc:	3fe00000 	.word	0x3fe00000
 80050d0:	08005be0 	.word	0x08005be0
 80050d4:	1e62      	subs	r2, r4, #1
 80050d6:	ab0c      	add	r3, sp, #48	; 0x30
 80050d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050dc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80050e0:	e7de      	b.n	80050a0 <__kernel_rem_pio2+0x318>
 80050e2:	a90c      	add	r1, sp, #48	; 0x30
 80050e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	430a      	orrs	r2, r1
 80050ec:	e790      	b.n	8005010 <__kernel_rem_pio2+0x288>
 80050ee:	3301      	adds	r3, #1
 80050f0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80050f4:	2900      	cmp	r1, #0
 80050f6:	d0fa      	beq.n	80050ee <__kernel_rem_pio2+0x366>
 80050f8:	9a08      	ldr	r2, [sp, #32]
 80050fa:	18e3      	adds	r3, r4, r3
 80050fc:	18a6      	adds	r6, r4, r2
 80050fe:	aa20      	add	r2, sp, #128	; 0x80
 8005100:	1c65      	adds	r5, r4, #1
 8005102:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005106:	9302      	str	r3, [sp, #8]
 8005108:	9b02      	ldr	r3, [sp, #8]
 800510a:	42ab      	cmp	r3, r5
 800510c:	da04      	bge.n	8005118 <__kernel_rem_pio2+0x390>
 800510e:	461c      	mov	r4, r3
 8005110:	e6b5      	b.n	8004e7e <__kernel_rem_pio2+0xf6>
 8005112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005114:	2301      	movs	r3, #1
 8005116:	e7eb      	b.n	80050f0 <__kernel_rem_pio2+0x368>
 8005118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800511a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800511e:	f7fb f9b9 	bl	8000494 <__aeabi_i2d>
 8005122:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005128:	46b3      	mov	fp, r6
 800512a:	461c      	mov	r4, r3
 800512c:	2700      	movs	r7, #0
 800512e:	f04f 0800 	mov.w	r8, #0
 8005132:	f04f 0900 	mov.w	r9, #0
 8005136:	9b06      	ldr	r3, [sp, #24]
 8005138:	429f      	cmp	r7, r3
 800513a:	dd06      	ble.n	800514a <__kernel_rem_pio2+0x3c2>
 800513c:	ab70      	add	r3, sp, #448	; 0x1c0
 800513e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005142:	e9c3 8900 	strd	r8, r9, [r3]
 8005146:	3501      	adds	r5, #1
 8005148:	e7de      	b.n	8005108 <__kernel_rem_pio2+0x380>
 800514a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800514e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005152:	f7fb fa09 	bl	8000568 <__aeabi_dmul>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4640      	mov	r0, r8
 800515c:	4649      	mov	r1, r9
 800515e:	f7fb f84d 	bl	80001fc <__adddf3>
 8005162:	3701      	adds	r7, #1
 8005164:	4680      	mov	r8, r0
 8005166:	4689      	mov	r9, r1
 8005168:	e7e5      	b.n	8005136 <__kernel_rem_pio2+0x3ae>
 800516a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800516e:	e754      	b.n	800501a <__kernel_rem_pio2+0x292>
 8005170:	ec47 6b10 	vmov	d0, r6, r7
 8005174:	f1ca 0000 	rsb	r0, sl, #0
 8005178:	f000 fa8e 	bl	8005698 <scalbn>
 800517c:	ec57 6b10 	vmov	r6, r7, d0
 8005180:	4b9f      	ldr	r3, [pc, #636]	; (8005400 <__kernel_rem_pio2+0x678>)
 8005182:	ee10 0a10 	vmov	r0, s0
 8005186:	2200      	movs	r2, #0
 8005188:	4639      	mov	r1, r7
 800518a:	f7fb fc73 	bl	8000a74 <__aeabi_dcmpge>
 800518e:	b300      	cbz	r0, 80051d2 <__kernel_rem_pio2+0x44a>
 8005190:	4b9c      	ldr	r3, [pc, #624]	; (8005404 <__kernel_rem_pio2+0x67c>)
 8005192:	2200      	movs	r2, #0
 8005194:	4630      	mov	r0, r6
 8005196:	4639      	mov	r1, r7
 8005198:	f7fb f9e6 	bl	8000568 <__aeabi_dmul>
 800519c:	f7fb fc7e 	bl	8000a9c <__aeabi_d2iz>
 80051a0:	4605      	mov	r5, r0
 80051a2:	f7fb f977 	bl	8000494 <__aeabi_i2d>
 80051a6:	4b96      	ldr	r3, [pc, #600]	; (8005400 <__kernel_rem_pio2+0x678>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	f7fb f9dd 	bl	8000568 <__aeabi_dmul>
 80051ae:	460b      	mov	r3, r1
 80051b0:	4602      	mov	r2, r0
 80051b2:	4639      	mov	r1, r7
 80051b4:	4630      	mov	r0, r6
 80051b6:	f7fb f81f 	bl	80001f8 <__aeabi_dsub>
 80051ba:	f7fb fc6f 	bl	8000a9c <__aeabi_d2iz>
 80051be:	f104 0b01 	add.w	fp, r4, #1
 80051c2:	ab0c      	add	r3, sp, #48	; 0x30
 80051c4:	f10a 0a18 	add.w	sl, sl, #24
 80051c8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80051cc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80051d0:	e72b      	b.n	800502a <__kernel_rem_pio2+0x2a2>
 80051d2:	4630      	mov	r0, r6
 80051d4:	4639      	mov	r1, r7
 80051d6:	f7fb fc61 	bl	8000a9c <__aeabi_d2iz>
 80051da:	ab0c      	add	r3, sp, #48	; 0x30
 80051dc:	46a3      	mov	fp, r4
 80051de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80051e2:	e722      	b.n	800502a <__kernel_rem_pio2+0x2a2>
 80051e4:	ab70      	add	r3, sp, #448	; 0x1c0
 80051e6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80051ea:	ab0c      	add	r3, sp, #48	; 0x30
 80051ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80051f0:	f7fb f950 	bl	8000494 <__aeabi_i2d>
 80051f4:	4622      	mov	r2, r4
 80051f6:	462b      	mov	r3, r5
 80051f8:	f7fb f9b6 	bl	8000568 <__aeabi_dmul>
 80051fc:	4632      	mov	r2, r6
 80051fe:	e9c9 0100 	strd	r0, r1, [r9]
 8005202:	463b      	mov	r3, r7
 8005204:	4620      	mov	r0, r4
 8005206:	4629      	mov	r1, r5
 8005208:	f7fb f9ae 	bl	8000568 <__aeabi_dmul>
 800520c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005210:	4604      	mov	r4, r0
 8005212:	460d      	mov	r5, r1
 8005214:	e713      	b.n	800503e <__kernel_rem_pio2+0x2b6>
 8005216:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800521a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800521e:	f7fb f9a3 	bl	8000568 <__aeabi_dmul>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4620      	mov	r0, r4
 8005228:	4629      	mov	r1, r5
 800522a:	f7fa ffe7 	bl	80001fc <__adddf3>
 800522e:	3601      	adds	r6, #1
 8005230:	4604      	mov	r4, r0
 8005232:	460d      	mov	r5, r1
 8005234:	9b04      	ldr	r3, [sp, #16]
 8005236:	429e      	cmp	r6, r3
 8005238:	dc01      	bgt.n	800523e <__kernel_rem_pio2+0x4b6>
 800523a:	45b0      	cmp	r8, r6
 800523c:	daeb      	bge.n	8005216 <__kernel_rem_pio2+0x48e>
 800523e:	ab48      	add	r3, sp, #288	; 0x120
 8005240:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005244:	e9c3 4500 	strd	r4, r5, [r3]
 8005248:	3f01      	subs	r7, #1
 800524a:	f108 0801 	add.w	r8, r8, #1
 800524e:	e6ff      	b.n	8005050 <__kernel_rem_pio2+0x2c8>
 8005250:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005252:	2b02      	cmp	r3, #2
 8005254:	dc0b      	bgt.n	800526e <__kernel_rem_pio2+0x4e6>
 8005256:	2b00      	cmp	r3, #0
 8005258:	dc6e      	bgt.n	8005338 <__kernel_rem_pio2+0x5b0>
 800525a:	d045      	beq.n	80052e8 <__kernel_rem_pio2+0x560>
 800525c:	9b07      	ldr	r3, [sp, #28]
 800525e:	f003 0007 	and.w	r0, r3, #7
 8005262:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005266:	ecbd 8b02 	vpop	{d8}
 800526a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005270:	2b03      	cmp	r3, #3
 8005272:	d1f3      	bne.n	800525c <__kernel_rem_pio2+0x4d4>
 8005274:	ab48      	add	r3, sp, #288	; 0x120
 8005276:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800527a:	46d0      	mov	r8, sl
 800527c:	46d9      	mov	r9, fp
 800527e:	f1b9 0f00 	cmp.w	r9, #0
 8005282:	f1a8 0808 	sub.w	r8, r8, #8
 8005286:	dc64      	bgt.n	8005352 <__kernel_rem_pio2+0x5ca>
 8005288:	465c      	mov	r4, fp
 800528a:	2c01      	cmp	r4, #1
 800528c:	f1aa 0a08 	sub.w	sl, sl, #8
 8005290:	dc7e      	bgt.n	8005390 <__kernel_rem_pio2+0x608>
 8005292:	2000      	movs	r0, #0
 8005294:	2100      	movs	r1, #0
 8005296:	f1bb 0f01 	cmp.w	fp, #1
 800529a:	f300 8097 	bgt.w	80053cc <__kernel_rem_pio2+0x644>
 800529e:	9b02      	ldr	r3, [sp, #8]
 80052a0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80052a4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f040 8099 	bne.w	80053e0 <__kernel_rem_pio2+0x658>
 80052ae:	9b01      	ldr	r3, [sp, #4]
 80052b0:	e9c3 5600 	strd	r5, r6, [r3]
 80052b4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80052b8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80052bc:	e7ce      	b.n	800525c <__kernel_rem_pio2+0x4d4>
 80052be:	ab48      	add	r3, sp, #288	; 0x120
 80052c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	f7fa ff98 	bl	80001fc <__adddf3>
 80052cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052d0:	f1bb 0f00 	cmp.w	fp, #0
 80052d4:	daf3      	bge.n	80052be <__kernel_rem_pio2+0x536>
 80052d6:	9b02      	ldr	r3, [sp, #8]
 80052d8:	b113      	cbz	r3, 80052e0 <__kernel_rem_pio2+0x558>
 80052da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052de:	4619      	mov	r1, r3
 80052e0:	9b01      	ldr	r3, [sp, #4]
 80052e2:	e9c3 0100 	strd	r0, r1, [r3]
 80052e6:	e7b9      	b.n	800525c <__kernel_rem_pio2+0x4d4>
 80052e8:	2000      	movs	r0, #0
 80052ea:	2100      	movs	r1, #0
 80052ec:	e7f0      	b.n	80052d0 <__kernel_rem_pio2+0x548>
 80052ee:	ab48      	add	r3, sp, #288	; 0x120
 80052f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f8:	f7fa ff80 	bl	80001fc <__adddf3>
 80052fc:	3c01      	subs	r4, #1
 80052fe:	2c00      	cmp	r4, #0
 8005300:	daf5      	bge.n	80052ee <__kernel_rem_pio2+0x566>
 8005302:	9b02      	ldr	r3, [sp, #8]
 8005304:	b1e3      	cbz	r3, 8005340 <__kernel_rem_pio2+0x5b8>
 8005306:	4602      	mov	r2, r0
 8005308:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800530c:	9c01      	ldr	r4, [sp, #4]
 800530e:	e9c4 2300 	strd	r2, r3, [r4]
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800531a:	f7fa ff6d 	bl	80001f8 <__aeabi_dsub>
 800531e:	ad4a      	add	r5, sp, #296	; 0x128
 8005320:	2401      	movs	r4, #1
 8005322:	45a3      	cmp	fp, r4
 8005324:	da0f      	bge.n	8005346 <__kernel_rem_pio2+0x5be>
 8005326:	9b02      	ldr	r3, [sp, #8]
 8005328:	b113      	cbz	r3, 8005330 <__kernel_rem_pio2+0x5a8>
 800532a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800532e:	4619      	mov	r1, r3
 8005330:	9b01      	ldr	r3, [sp, #4]
 8005332:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005336:	e791      	b.n	800525c <__kernel_rem_pio2+0x4d4>
 8005338:	465c      	mov	r4, fp
 800533a:	2000      	movs	r0, #0
 800533c:	2100      	movs	r1, #0
 800533e:	e7de      	b.n	80052fe <__kernel_rem_pio2+0x576>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	e7e2      	b.n	800530c <__kernel_rem_pio2+0x584>
 8005346:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800534a:	f7fa ff57 	bl	80001fc <__adddf3>
 800534e:	3401      	adds	r4, #1
 8005350:	e7e7      	b.n	8005322 <__kernel_rem_pio2+0x59a>
 8005352:	e9d8 4500 	ldrd	r4, r5, [r8]
 8005356:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800535a:	4620      	mov	r0, r4
 800535c:	4632      	mov	r2, r6
 800535e:	463b      	mov	r3, r7
 8005360:	4629      	mov	r1, r5
 8005362:	f7fa ff4b 	bl	80001fc <__adddf3>
 8005366:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4620      	mov	r0, r4
 8005370:	4629      	mov	r1, r5
 8005372:	f7fa ff41 	bl	80001f8 <__aeabi_dsub>
 8005376:	4632      	mov	r2, r6
 8005378:	463b      	mov	r3, r7
 800537a:	f7fa ff3f 	bl	80001fc <__adddf3>
 800537e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005382:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8005386:	ed88 7b00 	vstr	d7, [r8]
 800538a:	f109 39ff 	add.w	r9, r9, #4294967295
 800538e:	e776      	b.n	800527e <__kernel_rem_pio2+0x4f6>
 8005390:	e9da 8900 	ldrd	r8, r9, [sl]
 8005394:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005398:	4640      	mov	r0, r8
 800539a:	4632      	mov	r2, r6
 800539c:	463b      	mov	r3, r7
 800539e:	4649      	mov	r1, r9
 80053a0:	f7fa ff2c 	bl	80001fc <__adddf3>
 80053a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4640      	mov	r0, r8
 80053ae:	4649      	mov	r1, r9
 80053b0:	f7fa ff22 	bl	80001f8 <__aeabi_dsub>
 80053b4:	4632      	mov	r2, r6
 80053b6:	463b      	mov	r3, r7
 80053b8:	f7fa ff20 	bl	80001fc <__adddf3>
 80053bc:	ed9d 7b04 	vldr	d7, [sp, #16]
 80053c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80053c4:	ed8a 7b00 	vstr	d7, [sl]
 80053c8:	3c01      	subs	r4, #1
 80053ca:	e75e      	b.n	800528a <__kernel_rem_pio2+0x502>
 80053cc:	ab48      	add	r3, sp, #288	; 0x120
 80053ce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f7fa ff11 	bl	80001fc <__adddf3>
 80053da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053de:	e75a      	b.n	8005296 <__kernel_rem_pio2+0x50e>
 80053e0:	9b01      	ldr	r3, [sp, #4]
 80053e2:	9a01      	ldr	r2, [sp, #4]
 80053e4:	601d      	str	r5, [r3, #0]
 80053e6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80053ea:	605c      	str	r4, [r3, #4]
 80053ec:	609f      	str	r7, [r3, #8]
 80053ee:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80053f2:	60d3      	str	r3, [r2, #12]
 80053f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053f8:	6110      	str	r0, [r2, #16]
 80053fa:	6153      	str	r3, [r2, #20]
 80053fc:	e72e      	b.n	800525c <__kernel_rem_pio2+0x4d4>
 80053fe:	bf00      	nop
 8005400:	41700000 	.word	0x41700000
 8005404:	3e700000 	.word	0x3e700000

08005408 <__kernel_sin>:
 8005408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540c:	ed2d 8b04 	vpush	{d8-d9}
 8005410:	eeb0 8a41 	vmov.f32	s16, s2
 8005414:	eef0 8a61 	vmov.f32	s17, s3
 8005418:	ec55 4b10 	vmov	r4, r5, d0
 800541c:	b083      	sub	sp, #12
 800541e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005422:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005426:	9001      	str	r0, [sp, #4]
 8005428:	da06      	bge.n	8005438 <__kernel_sin+0x30>
 800542a:	ee10 0a10 	vmov	r0, s0
 800542e:	4629      	mov	r1, r5
 8005430:	f7fb fb34 	bl	8000a9c <__aeabi_d2iz>
 8005434:	2800      	cmp	r0, #0
 8005436:	d051      	beq.n	80054dc <__kernel_sin+0xd4>
 8005438:	4622      	mov	r2, r4
 800543a:	462b      	mov	r3, r5
 800543c:	4620      	mov	r0, r4
 800543e:	4629      	mov	r1, r5
 8005440:	f7fb f892 	bl	8000568 <__aeabi_dmul>
 8005444:	4682      	mov	sl, r0
 8005446:	468b      	mov	fp, r1
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4620      	mov	r0, r4
 800544e:	4629      	mov	r1, r5
 8005450:	f7fb f88a 	bl	8000568 <__aeabi_dmul>
 8005454:	a341      	add	r3, pc, #260	; (adr r3, 800555c <__kernel_sin+0x154>)
 8005456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545a:	4680      	mov	r8, r0
 800545c:	4689      	mov	r9, r1
 800545e:	4650      	mov	r0, sl
 8005460:	4659      	mov	r1, fp
 8005462:	f7fb f881 	bl	8000568 <__aeabi_dmul>
 8005466:	a33f      	add	r3, pc, #252	; (adr r3, 8005564 <__kernel_sin+0x15c>)
 8005468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546c:	f7fa fec4 	bl	80001f8 <__aeabi_dsub>
 8005470:	4652      	mov	r2, sl
 8005472:	465b      	mov	r3, fp
 8005474:	f7fb f878 	bl	8000568 <__aeabi_dmul>
 8005478:	a33c      	add	r3, pc, #240	; (adr r3, 800556c <__kernel_sin+0x164>)
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	f7fa febd 	bl	80001fc <__adddf3>
 8005482:	4652      	mov	r2, sl
 8005484:	465b      	mov	r3, fp
 8005486:	f7fb f86f 	bl	8000568 <__aeabi_dmul>
 800548a:	a33a      	add	r3, pc, #232	; (adr r3, 8005574 <__kernel_sin+0x16c>)
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	f7fa feb2 	bl	80001f8 <__aeabi_dsub>
 8005494:	4652      	mov	r2, sl
 8005496:	465b      	mov	r3, fp
 8005498:	f7fb f866 	bl	8000568 <__aeabi_dmul>
 800549c:	a337      	add	r3, pc, #220	; (adr r3, 800557c <__kernel_sin+0x174>)
 800549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a2:	f7fa feab 	bl	80001fc <__adddf3>
 80054a6:	9b01      	ldr	r3, [sp, #4]
 80054a8:	4606      	mov	r6, r0
 80054aa:	460f      	mov	r7, r1
 80054ac:	b9eb      	cbnz	r3, 80054ea <__kernel_sin+0xe2>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4650      	mov	r0, sl
 80054b4:	4659      	mov	r1, fp
 80054b6:	f7fb f857 	bl	8000568 <__aeabi_dmul>
 80054ba:	a325      	add	r3, pc, #148	; (adr r3, 8005550 <__kernel_sin+0x148>)
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f7fa fe9a 	bl	80001f8 <__aeabi_dsub>
 80054c4:	4642      	mov	r2, r8
 80054c6:	464b      	mov	r3, r9
 80054c8:	f7fb f84e 	bl	8000568 <__aeabi_dmul>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4620      	mov	r0, r4
 80054d2:	4629      	mov	r1, r5
 80054d4:	f7fa fe92 	bl	80001fc <__adddf3>
 80054d8:	4604      	mov	r4, r0
 80054da:	460d      	mov	r5, r1
 80054dc:	ec45 4b10 	vmov	d0, r4, r5
 80054e0:	b003      	add	sp, #12
 80054e2:	ecbd 8b04 	vpop	{d8-d9}
 80054e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ea:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <__kernel_sin+0x150>)
 80054ec:	ec51 0b18 	vmov	r0, r1, d8
 80054f0:	2200      	movs	r2, #0
 80054f2:	f7fb f839 	bl	8000568 <__aeabi_dmul>
 80054f6:	4632      	mov	r2, r6
 80054f8:	ec41 0b19 	vmov	d9, r0, r1
 80054fc:	463b      	mov	r3, r7
 80054fe:	4640      	mov	r0, r8
 8005500:	4649      	mov	r1, r9
 8005502:	f7fb f831 	bl	8000568 <__aeabi_dmul>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	ec51 0b19 	vmov	r0, r1, d9
 800550e:	f7fa fe73 	bl	80001f8 <__aeabi_dsub>
 8005512:	4652      	mov	r2, sl
 8005514:	465b      	mov	r3, fp
 8005516:	f7fb f827 	bl	8000568 <__aeabi_dmul>
 800551a:	ec53 2b18 	vmov	r2, r3, d8
 800551e:	f7fa fe6b 	bl	80001f8 <__aeabi_dsub>
 8005522:	a30b      	add	r3, pc, #44	; (adr r3, 8005550 <__kernel_sin+0x148>)
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	4606      	mov	r6, r0
 800552a:	460f      	mov	r7, r1
 800552c:	4640      	mov	r0, r8
 800552e:	4649      	mov	r1, r9
 8005530:	f7fb f81a 	bl	8000568 <__aeabi_dmul>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4630      	mov	r0, r6
 800553a:	4639      	mov	r1, r7
 800553c:	f7fa fe5e 	bl	80001fc <__adddf3>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4620      	mov	r0, r4
 8005546:	4629      	mov	r1, r5
 8005548:	f7fa fe56 	bl	80001f8 <__aeabi_dsub>
 800554c:	e7c4      	b.n	80054d8 <__kernel_sin+0xd0>
 800554e:	bf00      	nop
 8005550:	55555549 	.word	0x55555549
 8005554:	3fc55555 	.word	0x3fc55555
 8005558:	3fe00000 	.word	0x3fe00000
 800555c:	5acfd57c 	.word	0x5acfd57c
 8005560:	3de5d93a 	.word	0x3de5d93a
 8005564:	8a2b9ceb 	.word	0x8a2b9ceb
 8005568:	3e5ae5e6 	.word	0x3e5ae5e6
 800556c:	57b1fe7d 	.word	0x57b1fe7d
 8005570:	3ec71de3 	.word	0x3ec71de3
 8005574:	19c161d5 	.word	0x19c161d5
 8005578:	3f2a01a0 	.word	0x3f2a01a0
 800557c:	1110f8a6 	.word	0x1110f8a6
 8005580:	3f811111 	.word	0x3f811111

08005584 <fabs>:
 8005584:	ec51 0b10 	vmov	r0, r1, d0
 8005588:	ee10 2a10 	vmov	r2, s0
 800558c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005590:	ec43 2b10 	vmov	d0, r2, r3
 8005594:	4770      	bx	lr
	...

08005598 <floor>:
 8005598:	ec51 0b10 	vmov	r0, r1, d0
 800559c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80055a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80055a8:	2e13      	cmp	r6, #19
 80055aa:	ee10 5a10 	vmov	r5, s0
 80055ae:	ee10 8a10 	vmov	r8, s0
 80055b2:	460c      	mov	r4, r1
 80055b4:	dc32      	bgt.n	800561c <floor+0x84>
 80055b6:	2e00      	cmp	r6, #0
 80055b8:	da14      	bge.n	80055e4 <floor+0x4c>
 80055ba:	a333      	add	r3, pc, #204	; (adr r3, 8005688 <floor+0xf0>)
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f7fa fe1c 	bl	80001fc <__adddf3>
 80055c4:	2200      	movs	r2, #0
 80055c6:	2300      	movs	r3, #0
 80055c8:	f7fb fa5e 	bl	8000a88 <__aeabi_dcmpgt>
 80055cc:	b138      	cbz	r0, 80055de <floor+0x46>
 80055ce:	2c00      	cmp	r4, #0
 80055d0:	da57      	bge.n	8005682 <floor+0xea>
 80055d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80055d6:	431d      	orrs	r5, r3
 80055d8:	d001      	beq.n	80055de <floor+0x46>
 80055da:	4c2d      	ldr	r4, [pc, #180]	; (8005690 <floor+0xf8>)
 80055dc:	2500      	movs	r5, #0
 80055de:	4621      	mov	r1, r4
 80055e0:	4628      	mov	r0, r5
 80055e2:	e025      	b.n	8005630 <floor+0x98>
 80055e4:	4f2b      	ldr	r7, [pc, #172]	; (8005694 <floor+0xfc>)
 80055e6:	4137      	asrs	r7, r6
 80055e8:	ea01 0307 	and.w	r3, r1, r7
 80055ec:	4303      	orrs	r3, r0
 80055ee:	d01f      	beq.n	8005630 <floor+0x98>
 80055f0:	a325      	add	r3, pc, #148	; (adr r3, 8005688 <floor+0xf0>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fa fe01 	bl	80001fc <__adddf3>
 80055fa:	2200      	movs	r2, #0
 80055fc:	2300      	movs	r3, #0
 80055fe:	f7fb fa43 	bl	8000a88 <__aeabi_dcmpgt>
 8005602:	2800      	cmp	r0, #0
 8005604:	d0eb      	beq.n	80055de <floor+0x46>
 8005606:	2c00      	cmp	r4, #0
 8005608:	bfbe      	ittt	lt
 800560a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800560e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005612:	19a4      	addlt	r4, r4, r6
 8005614:	ea24 0407 	bic.w	r4, r4, r7
 8005618:	2500      	movs	r5, #0
 800561a:	e7e0      	b.n	80055de <floor+0x46>
 800561c:	2e33      	cmp	r6, #51	; 0x33
 800561e:	dd0b      	ble.n	8005638 <floor+0xa0>
 8005620:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005624:	d104      	bne.n	8005630 <floor+0x98>
 8005626:	ee10 2a10 	vmov	r2, s0
 800562a:	460b      	mov	r3, r1
 800562c:	f7fa fde6 	bl	80001fc <__adddf3>
 8005630:	ec41 0b10 	vmov	d0, r0, r1
 8005634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005638:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800563c:	f04f 33ff 	mov.w	r3, #4294967295
 8005640:	fa23 f707 	lsr.w	r7, r3, r7
 8005644:	4207      	tst	r7, r0
 8005646:	d0f3      	beq.n	8005630 <floor+0x98>
 8005648:	a30f      	add	r3, pc, #60	; (adr r3, 8005688 <floor+0xf0>)
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	f7fa fdd5 	bl	80001fc <__adddf3>
 8005652:	2200      	movs	r2, #0
 8005654:	2300      	movs	r3, #0
 8005656:	f7fb fa17 	bl	8000a88 <__aeabi_dcmpgt>
 800565a:	2800      	cmp	r0, #0
 800565c:	d0bf      	beq.n	80055de <floor+0x46>
 800565e:	2c00      	cmp	r4, #0
 8005660:	da02      	bge.n	8005668 <floor+0xd0>
 8005662:	2e14      	cmp	r6, #20
 8005664:	d103      	bne.n	800566e <floor+0xd6>
 8005666:	3401      	adds	r4, #1
 8005668:	ea25 0507 	bic.w	r5, r5, r7
 800566c:	e7b7      	b.n	80055de <floor+0x46>
 800566e:	2301      	movs	r3, #1
 8005670:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005674:	fa03 f606 	lsl.w	r6, r3, r6
 8005678:	4435      	add	r5, r6
 800567a:	4545      	cmp	r5, r8
 800567c:	bf38      	it	cc
 800567e:	18e4      	addcc	r4, r4, r3
 8005680:	e7f2      	b.n	8005668 <floor+0xd0>
 8005682:	2500      	movs	r5, #0
 8005684:	462c      	mov	r4, r5
 8005686:	e7aa      	b.n	80055de <floor+0x46>
 8005688:	8800759c 	.word	0x8800759c
 800568c:	7e37e43c 	.word	0x7e37e43c
 8005690:	bff00000 	.word	0xbff00000
 8005694:	000fffff 	.word	0x000fffff

08005698 <scalbn>:
 8005698:	b570      	push	{r4, r5, r6, lr}
 800569a:	ec55 4b10 	vmov	r4, r5, d0
 800569e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80056a2:	4606      	mov	r6, r0
 80056a4:	462b      	mov	r3, r5
 80056a6:	b99a      	cbnz	r2, 80056d0 <scalbn+0x38>
 80056a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80056ac:	4323      	orrs	r3, r4
 80056ae:	d036      	beq.n	800571e <scalbn+0x86>
 80056b0:	4b39      	ldr	r3, [pc, #228]	; (8005798 <scalbn+0x100>)
 80056b2:	4629      	mov	r1, r5
 80056b4:	ee10 0a10 	vmov	r0, s0
 80056b8:	2200      	movs	r2, #0
 80056ba:	f7fa ff55 	bl	8000568 <__aeabi_dmul>
 80056be:	4b37      	ldr	r3, [pc, #220]	; (800579c <scalbn+0x104>)
 80056c0:	429e      	cmp	r6, r3
 80056c2:	4604      	mov	r4, r0
 80056c4:	460d      	mov	r5, r1
 80056c6:	da10      	bge.n	80056ea <scalbn+0x52>
 80056c8:	a32b      	add	r3, pc, #172	; (adr r3, 8005778 <scalbn+0xe0>)
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	e03a      	b.n	8005746 <scalbn+0xae>
 80056d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80056d4:	428a      	cmp	r2, r1
 80056d6:	d10c      	bne.n	80056f2 <scalbn+0x5a>
 80056d8:	ee10 2a10 	vmov	r2, s0
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fa fd8c 	bl	80001fc <__adddf3>
 80056e4:	4604      	mov	r4, r0
 80056e6:	460d      	mov	r5, r1
 80056e8:	e019      	b.n	800571e <scalbn+0x86>
 80056ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80056ee:	460b      	mov	r3, r1
 80056f0:	3a36      	subs	r2, #54	; 0x36
 80056f2:	4432      	add	r2, r6
 80056f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80056f8:	428a      	cmp	r2, r1
 80056fa:	dd08      	ble.n	800570e <scalbn+0x76>
 80056fc:	2d00      	cmp	r5, #0
 80056fe:	a120      	add	r1, pc, #128	; (adr r1, 8005780 <scalbn+0xe8>)
 8005700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005704:	da1c      	bge.n	8005740 <scalbn+0xa8>
 8005706:	a120      	add	r1, pc, #128	; (adr r1, 8005788 <scalbn+0xf0>)
 8005708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800570c:	e018      	b.n	8005740 <scalbn+0xa8>
 800570e:	2a00      	cmp	r2, #0
 8005710:	dd08      	ble.n	8005724 <scalbn+0x8c>
 8005712:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005716:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800571a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800571e:	ec45 4b10 	vmov	d0, r4, r5
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005728:	da19      	bge.n	800575e <scalbn+0xc6>
 800572a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800572e:	429e      	cmp	r6, r3
 8005730:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005734:	dd0a      	ble.n	800574c <scalbn+0xb4>
 8005736:	a112      	add	r1, pc, #72	; (adr r1, 8005780 <scalbn+0xe8>)
 8005738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e2      	bne.n	8005706 <scalbn+0x6e>
 8005740:	a30f      	add	r3, pc, #60	; (adr r3, 8005780 <scalbn+0xe8>)
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f7fa ff0f 	bl	8000568 <__aeabi_dmul>
 800574a:	e7cb      	b.n	80056e4 <scalbn+0x4c>
 800574c:	a10a      	add	r1, pc, #40	; (adr r1, 8005778 <scalbn+0xe0>)
 800574e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0b8      	beq.n	80056c8 <scalbn+0x30>
 8005756:	a10e      	add	r1, pc, #56	; (adr r1, 8005790 <scalbn+0xf8>)
 8005758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800575c:	e7b4      	b.n	80056c8 <scalbn+0x30>
 800575e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005762:	3236      	adds	r2, #54	; 0x36
 8005764:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005768:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800576c:	4620      	mov	r0, r4
 800576e:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <scalbn+0x108>)
 8005770:	2200      	movs	r2, #0
 8005772:	e7e8      	b.n	8005746 <scalbn+0xae>
 8005774:	f3af 8000 	nop.w
 8005778:	c2f8f359 	.word	0xc2f8f359
 800577c:	01a56e1f 	.word	0x01a56e1f
 8005780:	8800759c 	.word	0x8800759c
 8005784:	7e37e43c 	.word	0x7e37e43c
 8005788:	8800759c 	.word	0x8800759c
 800578c:	fe37e43c 	.word	0xfe37e43c
 8005790:	c2f8f359 	.word	0xc2f8f359
 8005794:	81a56e1f 	.word	0x81a56e1f
 8005798:	43500000 	.word	0x43500000
 800579c:	ffff3cb0 	.word	0xffff3cb0
 80057a0:	3c900000 	.word	0x3c900000

080057a4 <__libc_init_array>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	4d0d      	ldr	r5, [pc, #52]	; (80057dc <__libc_init_array+0x38>)
 80057a8:	4c0d      	ldr	r4, [pc, #52]	; (80057e0 <__libc_init_array+0x3c>)
 80057aa:	1b64      	subs	r4, r4, r5
 80057ac:	10a4      	asrs	r4, r4, #2
 80057ae:	2600      	movs	r6, #0
 80057b0:	42a6      	cmp	r6, r4
 80057b2:	d109      	bne.n	80057c8 <__libc_init_array+0x24>
 80057b4:	4d0b      	ldr	r5, [pc, #44]	; (80057e4 <__libc_init_array+0x40>)
 80057b6:	4c0c      	ldr	r4, [pc, #48]	; (80057e8 <__libc_init_array+0x44>)
 80057b8:	f000 f82e 	bl	8005818 <_init>
 80057bc:	1b64      	subs	r4, r4, r5
 80057be:	10a4      	asrs	r4, r4, #2
 80057c0:	2600      	movs	r6, #0
 80057c2:	42a6      	cmp	r6, r4
 80057c4:	d105      	bne.n	80057d2 <__libc_init_array+0x2e>
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
 80057c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057cc:	4798      	blx	r3
 80057ce:	3601      	adds	r6, #1
 80057d0:	e7ee      	b.n	80057b0 <__libc_init_array+0xc>
 80057d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d6:	4798      	blx	r3
 80057d8:	3601      	adds	r6, #1
 80057da:	e7f2      	b.n	80057c2 <__libc_init_array+0x1e>
 80057dc:	08005c38 	.word	0x08005c38
 80057e0:	08005c38 	.word	0x08005c38
 80057e4:	08005c38 	.word	0x08005c38
 80057e8:	08005c3c 	.word	0x08005c3c

080057ec <memcpy>:
 80057ec:	440a      	add	r2, r1
 80057ee:	4291      	cmp	r1, r2
 80057f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80057f4:	d100      	bne.n	80057f8 <memcpy+0xc>
 80057f6:	4770      	bx	lr
 80057f8:	b510      	push	{r4, lr}
 80057fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005802:	4291      	cmp	r1, r2
 8005804:	d1f9      	bne.n	80057fa <memcpy+0xe>
 8005806:	bd10      	pop	{r4, pc}

08005808 <memset>:
 8005808:	4402      	add	r2, r0
 800580a:	4603      	mov	r3, r0
 800580c:	4293      	cmp	r3, r2
 800580e:	d100      	bne.n	8005812 <memset+0xa>
 8005810:	4770      	bx	lr
 8005812:	f803 1b01 	strb.w	r1, [r3], #1
 8005816:	e7f9      	b.n	800580c <memset+0x4>

08005818 <_init>:
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	bf00      	nop
 800581c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581e:	bc08      	pop	{r3}
 8005820:	469e      	mov	lr, r3
 8005822:	4770      	bx	lr

08005824 <_fini>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	bf00      	nop
 8005828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582a:	bc08      	pop	{r3}
 800582c:	469e      	mov	lr, r3
 800582e:	4770      	bx	lr
